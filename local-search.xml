<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2022/06/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/06/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><table><thead><tr><th><strong>表达式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>[abc]</code></td><td>字符集。匹配集合中所含的任一字符。</td></tr><tr><td><code>[abc]</code></td><td>否定字符集。匹配任何不在集合中的字符。</td></tr><tr><td><code>[a-z]</code></td><td>字符范围。匹配指定范围内的任意字符。</td></tr><tr><td><code>.</code></td><td>匹配除换行符以外的任何单个字符。</td></tr><tr><td><code>\</code></td><td>转义字符。</td></tr><tr><td><code>\w</code></td><td>匹配任何字母数字，包括下划线（等价于[A-Za-z0-9_]）。</td></tr><tr><td><code>\W</code></td><td>匹配任何非字母数字（等价于[A-Za-z0-9_]）。</td></tr><tr><td><code>\d</code></td><td>数字。匹配任何数字。</td></tr><tr><td><code>\D</code></td><td>非数字。匹配任何非数字字符。</td></tr><tr><td><code>\s</code></td><td>空白。匹配任何空白字符，包括空格、制表符等。</td></tr><tr><td><code>\S</code></td><td>非空白。匹配任何非空白字符。</td></tr><tr><td><code>(expression)</code></td><td>分组。匹配括号里的整个表达式。</td></tr><tr><td><code>(?:expression)</code></td><td>非捕获分组。匹配括号里的整个字符串但不获取匹配结果，拿不到分组引用。</td></tr><tr><td><code>\num</code></td><td>对前面所匹配分组的引用。比如<code>(\d)\1</code>可以匹配两个相同的数字，<code>(A)(B)\1\2</code>则可以匹配<code>ABAB</code>。</td></tr><tr><td><code>^</code></td><td>匹配字符串或行开头。</td></tr><tr><td><code>$</code></td><td>匹配字符串或行结尾。</td></tr><tr><td><code>\b</code></td><td>匹配单词边界。比如<code>C\b</code>可以匹配<code>ABC</code>末尾的<code>C</code>，不能匹配<code>CBA</code>中的<code>C</code></td></tr><tr><td><code>\B</code></td><td>匹配非单词边界。比如<code>C\B</code>可以匹配<code>ACB</code>中的<code>C</code>，不能匹配<code>ABC</code>中的<code>C</code></td></tr><tr><td><code>?</code></td><td>匹配前面的表达式0个或1个。即表示可选项。</td></tr><tr><td><code>+</code></td><td>匹配前面的表达式至少1个。</td></tr><tr><td><code>*</code></td><td>匹配前面的表达式0个或多个。</td></tr><tr><td><code>| </code></td><td>或运算符。并集，可以匹配符号前后的表达式。</td></tr><tr><td><code>&#123;m&#125;</code></td><td>匹配前面的表达式m个。</td></tr><tr><td><code>&#123;m,&#125;</code></td><td>匹配前面的表达式最少m个。</td></tr><tr><td><code>&#123;m,n&#125;</code></td><td>匹配前面的表达式最少m个，最多n个。</td></tr><tr><td><code>(?=)</code></td><td>正向先行断言。比如<code>A(?=B)</code>能匹配<code>AB</code>中的<code>A</code>，但不能匹配<code>AC</code>中的<code>A</code>。</td></tr><tr><td><code>(?!)</code></td><td>负向先行断言。比如<code>A(?!B)</code>不能匹配<code>AB</code>中的<code>A</code>，但能匹配<code>AC</code>中的<code>A</code>。</td></tr><tr><td><code>(?&lt;=)</code></td><td>反向预查。比如<code>(?&lt;=A)B</code>能匹配<code>AB</code>中的<code>B</code>，但不能匹配<code>CB</code>中的<code>B</code>。</td></tr><tr><td><code>(?&lt;!)</code></td><td>反向否定预查。比如<code>(?&lt;!A)B</code>不能匹配<code>AB</code>中的<code>B</code>，但能匹配<code>CB</code>中的<code>B</code>。</td></tr><tr><td><code>/.../i</code></td><td>忽略大小写。  (JAVA 中   Pattern. CASE_INSENSITIVE)</td></tr><tr><td><code>/.../g</code></td><td>全局匹配。</td></tr><tr><td><code>/.../m</code></td><td>多行修饰符。用于多行匹配。 (JAVA 中   Pattern. MULTILINE )</td></tr><tr><td><code>/.../x</code></td><td>该标志告诉引擎忽略所有空格并允许在正则表达式中添加注释；也称为冗长</td></tr><tr><td><code>/.../s</code></td><td>这将启用点元字符。也匹配换行符。整个字符串被视为单行输入(JAVA 中  Pattern. DOTALL)</td></tr><tr><td><code>/.../u</code></td><td>模式字符串将被视为 UTF-16，这意味着 unicode 字符也将包含在 [a-z] 范围内，以及像 \w 这样的转义序列中。(JAVA 中 Pattern.UNICODE_CHARACTER_CLASS  )</td></tr><tr><td><code>\n</code></td><td>匹配换行符</td></tr><tr><td><code>\r</code></td><td>匹配回车符</td></tr><tr><td><code>\t</code></td><td>匹配制表符</td></tr><tr><td><code>\0</code></td><td>匹配一个空字符</td></tr></tbody></table><h2 id="正则常用表达式"><a href="#正则常用表达式" class="headerlink" title="正则常用表达式"></a>正则常用表达式</h2><a class="btn" href="https://cdn.ocrud.com/file/regex.html"  title="正则常用表达式" target="_blank">正则常用表达式</a><h2 id="工具地址"><a href="#工具地址" class="headerlink" title="工具地址"></a>工具地址</h2><a class="btn" href="https://ihateregex.io"  title="正则表达式生成" target="_blank">正则表达式生成</a><br><a class="btn" href="https://regex101.com"  title="正则校验工具" target="_blank">正则校验工具</a><br><a class="btn" href="https://jex.im/regulex"  title="可视化测试工具" target="_blank">可视化测试工具</a>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arthas学习</title>
    <link href="/2022/06/15/arthas%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/06/15/arthas%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="arthas学习"><a href="#arthas学习" class="headerlink" title="arthas学习"></a>arthas学习</h1><h2 id="1-入门必备"><a href="#1-入门必备" class="headerlink" title="1.入门必备"></a>1.入门必备</h2><a class="btn" href="https://github.com/alibaba/arthas/releases"  title="下载地址" target="_blank">下载地址</a><a class="btn" href="https://arthas.aliyun.com/zh-cn/"  title="官方文档" target="_blank">官方文档</a><h2 id="2-实践"><a href="#2-实践" class="headerlink" title="2.实践"></a>2.实践</h2><h3 id="重点命令介绍以及基础使用"><a href="#重点命令介绍以及基础使用" class="headerlink" title="重点命令介绍以及基础使用"></a>重点命令介绍以及基础使用</h3><a class="btn" href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=arthas-basics"  title="官方基础使用教程" target="_blank">官方基础使用教程</a><h4 id="dashboard命令"><a href="#dashboard命令" class="headerlink" title="dashboard命令"></a>dashboard命令</h4><p>输入<code>dashboard</code>查看当前系统的实时数据面板，例如：服务器thread（线程）信息、内存memory、GC回收等情况，按<code>ctrl+c</code>可以中断执行。<br>数据列说明</p><blockquote><p>ID:  Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应。<br>NAME:  线程名<br>GROUP:  线程组名<br>PRIORITY:  线程优先级, 1~10之间的数字，越大表示优先级越高<br>STATE:  线程的状态<br>%CPU:  线程的cpu使用率。比如采样间隔1000ms，某个线程的增量cpu时间为100ms，则cpu使用率=100/1000=10%<br>DELTA_TIME:  上次采样之后线程运行增量CPU时间，数据格式为秒<br>TIME:  线程运行总CPU时间，数据格式为分:秒<br>INTERRUPTED:  线程当前的中断位状态<br>DAEMON:  是否是daemon线程另外 </p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">面板会默认会每5秒刷新一次，并且会一直刷新下去，如果想要指定刷新次数和间隔时间`-i`表示刷新的间隔时间，单位（毫秒），`-n` 表表示查询的次数，到达指定次数后，自动退出dashboard面板；dashboard dashboard -i 1000 -n 2</code></pre></div><h4 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h4><p>查看线程的堆栈信息，当没有参数时，默认显示第一页的线程信息</p><p>查看某个线程的堆栈：</p><div class="code-wrapper"><pre><code class="hljs bash">thread 1 :1为线程的<span class="hljs-built_in">id</span>thread -n 5 :打印前5个最忙的线程并打印堆栈thread -all :显示所有匹配的线程thread -n 3 -i 1000 :列出1000ms内最忙的3个线程栈thread -state WAITING :查看指定状态的线程,（TIMED_WAITI、WAITING、RUNNABLE等等）thread -b :找出阻塞其他线程的线程,当出现死锁后，会提示你出现死锁的位置</code></pre></div><h4 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h4><p>查看当前JVM信息<br>jvm显示jvm的数据汇总,具体内容分为以下几块</p><div class="code-wrapper"><pre><code class="hljs bash">runtime： 包括jvm开始时间,启动参数,class_path等class-loading ：已加载类的数量,总共加载类数量,已卸载类的数量garbage-collectors： 显示使用的垃圾收集器及垃圾收集次数memory ：堆内存空间使用情况thread： 线程总数,守护线程数,死锁数量thread线程相关信息如下COUNT: JVM当前活跃的线程数DAEMON-COUNT: JVM当前活跃的守护线程数PEAK-COUNT: 从JVM启动开始曾经活着的最大线程数STARTED-COUNT: 从JVM启动开始总共启动过的线程次数DEADLOCK-COUNT: JVM当前死锁的线程数</code></pre></div><h4 id="vmoption"><a href="#vmoption" class="headerlink" title="vmoption"></a>vmoption</h4><p>这个命令可以看到我们的java项目在运行时设置了哪些参数，命令没有参数时会打印所有的vm参数</p><p>查看单个参数和动态设置参数功能，这里可以动态更新参数，不需要重启java进程</p><div class="code-wrapper"><pre><code class="hljs bash">查看/更新虚拟机参数vmoption查看指定的vm参数vmoption PrintGCDetails 更新指定的vm参数vmoption PrintGCDetails <span class="hljs-literal">true</span></code></pre></div><h4 id="ognl"><a href="#ognl" class="headerlink" title="ognl"></a>ognl</h4><p>动态执行代码 </p><div class="code-wrapper"><pre><code class="hljs bash">调用静态方法ognl <span class="hljs-string">&#x27;@java.lang.System@out.println(&quot;123&quot;)&#x27;</span>执行后，可以看到控制台打印了123</code></pre></div><h4 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h4><p>查看jvm已加载的类信息</p><div class="code-wrapper"><pre><code class="hljs bash">sc com.ocrud.Application加上`-d`参数可以打印类的详细信息，并且还可以查看你这个类在哪个jar包里面sc -d com.ocrud.Application模糊查询sc -d *.Test ：查询所有类名为Test的类sc -d com.*：查询com包下面所有的类，会往所有的子包遍历</code></pre></div><h4 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h4><p>查看已加载的类方法信息</p><h4 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h4><p>方法执行监控</p><div class="code-wrapper"><pre><code class="hljs bash">monitor -c 1 -n 2 com.xxx.类名 方法名其中-c 1 表示监控周期，每一秒监控一次，如果不指定，默认是120秒周期-n 2 表示一共监控2次</code></pre></div><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>方法执行数据观测<br>watch命令可以让用户能方便的观察到指定方法的调用情况。能观察到的范围为：返回值、抛出异常、入参，通过编写 OGNL 表达式进行对应变量的查看。<br>1、以下命令用于观察方法出参和返回值，</p><div class="code-wrapper"><pre><code class="hljs bash">watch com.xxx.类名 方法名 <span class="hljs-string">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2 -b -e -s -f <span class="hljs-string">&quot;&#123;params,returnObj&#125;&quot;</span>是观察表达式，是一个ognl表达式，-x 2是指定输出结果的属性遍历深度，默认值为1，为1时看不到参数的具体值，只能看到类型；-b：在方法调用之前观察，用此命令可查看方法的入参-e：在方法异常之后观察。用此命令可查看方法抛出的异常-s：在方法返回之后观察，可查看方法的返回值-f：在方法结束之后(正常返回和异常返回)观察，可查看方法的返回值和异常信息，默认打开-f</code></pre></div><h2 id="3-进阶使用"><a href="#3-进阶使用" class="headerlink" title="3.进阶使用"></a>3.进阶使用</h2><a class="btn" href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=arthas-advanced"  title="官方进阶使用教程" target="_blank">官方进阶使用教程</a><h4 id="1-热修改代码"><a href="#1-热修改代码" class="headerlink" title="1. 热修改代码"></a>1. 热修改代码</h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#下载执行</span>wget https://arthas.aliyun.com/arthas-boot.jar ; java -jar arthas-boot.jar<span class="hljs-comment">#可能需要sudo权限,不然网络权限不足</span>jad --&gt; mc --&gt; redefine<span class="hljs-comment">#1.反编译输出</span>jad --source-only com.ocrud.Application &gt; ./Application.java<span class="hljs-comment">#2.搜索到对应类的classloader</span>sc -d *Application |grep classLoader<span class="hljs-comment">#3.用指定的classloader重新将类在内存中编译</span>mc -c classLoader的code ./Application.java -d ./<span class="hljs-comment">#4.重新热加载(无需重启服务),并且非侵入, 只是临时修改</span>redefine /root/api/com/ocrud/Application.class<span class="hljs-comment">#5.记得删除掉生成的临时文件</span></code></pre></div><h4 id="2-定位报错"><a href="#2-定位报错" class="headerlink" title="2. 定位报错"></a>2. 定位报错</h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 观察方法的入参值,返回值,抛出异常三个常用参数就行了</span>watch com.ocrud.Application * <span class="hljs-string">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span> -x 3 <span class="hljs-comment">#展开3层异常栈</span><span class="hljs-comment"># 一般watch就能秒杀500报错这种问题了,trace能帮我们把时间消耗用树形输出, 就会更清晰</span>trace com.ocrud.Application * <span class="hljs-comment">#监控类、方法的调用进行监控，调用次数、成功次数、失败次数、平均响应时长、失败率等</span>monitor -c 3 com.ocrud.Application *</code></pre></div><h4 id="3-常用的正则和通配符"><a href="#3-常用的正则和通配符" class="headerlink" title="3. 常用的正则和通配符"></a>3. 常用的正则和通配符</h4><a class="btn" href="ttps://github.com/alibaba/arthas/issues/11"  title="活用ognl表达式" target="_blank">活用ognl表达式</a><h4 id="4-获取Spring-Context"><a href="#4-获取Spring-Context" class="headerlink" title="4.获取Spring Context"></a>4.获取Spring Context</h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用tt命令获取到spring context</span>tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod<span class="hljs-comment">#使用tt命令从调用记录里获取到spring context</span>tt -i 1000 -w <span class="hljs-string">&#x27;target.getApplicationContext()&#x27;</span><span class="hljs-comment">#获取spring bean，并调用函数</span>tt -i 1000 -w <span class="hljs-string">&#x27;target.getApplicationContext().getBean(&quot;类名&quot;).方法名()&#x27;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>arthas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arthas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法记录</title>
    <link href="/2022/04/25/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/04/25/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 两数之和</span><span class="hljs-comment"> * 字典法</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_1</span>  &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(Arrays.toString(twoSum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">15</span>&#125;, <span class="hljs-number">9</span>)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;        <span class="hljs-comment">// value index</span>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;                <span class="hljs-comment">// 放置第一个元素</span>                map.put(nums[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// 寻找目标值是否在map中</span>                <span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> target - nums[i];                <span class="hljs-comment">// 存在即返回</span>                <span class="hljs-keyword">if</span> (map.containsKey(q)) &#123;                    res[<span class="hljs-number">0</span>] = map.get(q);                    res[<span class="hljs-number">1</span>] = i;                    <span class="hljs-keyword">return</span> res;                &#125;                map.put(nums[i], i);            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre></div><h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/palindrome-number/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_9</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(isPalindrome(<span class="hljs-number">121</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">9</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(String.valueOf(x)).reverse().toString().equals(String.valueOf(x));    &#125;&#125;</code></pre></div><h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/roman-to-integer/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_13</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(romanToInt(<span class="hljs-string">&quot;MCMXCIV&quot;</span>));    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">romanToInt</span><span class="hljs-params">(String s)</span> &#123;        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">7</span>);        map.put(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-number">1</span>);        map.put(<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">5</span>);        map.put(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">10</span>);        map.put(<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">50</span>);        map.put(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">100</span>);        map.put(<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">500</span>);        map.put(<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">1000</span>);        Map&lt;String, Integer&gt; specialMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">5</span>);        specialMap.put(<span class="hljs-string">&quot;IV&quot;</span>, <span class="hljs-number">4</span>);        specialMap.put(<span class="hljs-string">&quot;IX&quot;</span>, <span class="hljs-number">9</span>);        specialMap.put(<span class="hljs-string">&quot;XL&quot;</span>, <span class="hljs-number">40</span>);        specialMap.put(<span class="hljs-string">&quot;XC&quot;</span>, <span class="hljs-number">90</span>);        specialMap.put(<span class="hljs-string">&quot;CD&quot;</span>, <span class="hljs-number">400</span>);        specialMap.put(<span class="hljs-string">&quot;CM&quot;</span>, <span class="hljs-number">900</span>);        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">symbol</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;:&quot;</span>;        <span class="hljs-keyword">for</span> (String key : specialMap.keySet()) &#123;            <span class="hljs-keyword">if</span> (s.contains(key)) &#123;                s = s.replaceAll(key, specialMap.get(key).toString() + symbol);            &#125;        &#125;        <span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;            <span class="hljs-keyword">if</span> (s.contains(key)) &#123;                s = s.replaceAll(key, map.get(key).toString() + symbol);            &#125;        &#125;        <span class="hljs-keyword">for</span> (String s2 : s.split(symbol)) &#123;            i += Integer.parseInt(s2);        &#125;        <span class="hljs-keyword">return</span> i;    &#125;&#125;</code></pre></div><h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/longest-common-prefix/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_14</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(longestCommonPrefix(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;flower&quot;</span>, <span class="hljs-string">&quot;flow&quot;</span>, <span class="hljs-string">&quot;flight&quot;</span>&#125;));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String[] strs)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> strs[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span> (String string : strs) &#123;            <span class="hljs-keyword">while</span> (!string.startsWith(s)) &#123;                <span class="hljs-keyword">if</span> (string.length() == <span class="hljs-number">0</span>) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;                &#125;                s = s.substring(<span class="hljs-number">0</span>, s.length() - <span class="hljs-number">1</span>);            &#125;        &#125;        <span class="hljs-keyword">return</span> s;    &#125;&#125;</code></pre></div><h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/valid-parentheses/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_20</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(isValid(<span class="hljs-string">&quot;[(&#123;(())&#125;[()])]&quot;</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;        <span class="hljs-keyword">while</span> (s.contains(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>) || s.contains(<span class="hljs-string">&quot;[]&quot;</span>) || s.contains(<span class="hljs-string">&quot;()&quot;</span>)) &#123;            <span class="hljs-keyword">if</span> (s.contains(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>)) &#123;                s = s.replace(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);            &#125;            <span class="hljs-keyword">if</span> (s.contains(<span class="hljs-string">&quot;()&quot;</span>)) &#123;                s = s.replace(<span class="hljs-string">&quot;()&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);            &#125;            <span class="hljs-keyword">if</span> (s.contains(<span class="hljs-string">&quot;[]&quot;</span>)) &#123;                s = s.replace(<span class="hljs-string">&quot;[]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);            &#125;        &#125;        <span class="hljs-keyword">return</span> s.isEmpty();    &#125;&#125;</code></pre></div><h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_21</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">ListNode</span> <span class="hljs-variable">listNode1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">4</span>)));        <span class="hljs-type">ListNode</span> <span class="hljs-variable">listNode2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">4</span>)));        System.out.println(mergeTwoLists(listNode1, listNode2));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;        <span class="hljs-keyword">if</span> (list1 == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> list2;        &#125;        <span class="hljs-keyword">if</span> (list2 == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> list1;        &#125;        <span class="hljs-comment">// 选取头结点</span>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> list1.getVal() &lt; list2.getVal() ? list1 : list2;        res.setNext(mergeTwoLists(res.getNext(), list1.getVal() &gt;= list2.getVal() ? list1 : list2));        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre></div><h1 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 删除有序数组中的重复项</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_26</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(removeDuplicates(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (fast &lt; nums.length) &#123;            <span class="hljs-keyword">if</span> (nums[fast] != nums[slow]) &#123;                slow++;                nums[slow] = nums[fast];            &#125;            fast++;        &#125;        <span class="hljs-comment">// 数组长度为索引 + 1</span>        <span class="hljs-keyword">return</span> slow + <span class="hljs-number">1</span>;    &#125;&#125;</code></pre></div><h1 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 移除元素</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/remove-element/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_27</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(removeElement(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<span class="hljs-number">2</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (fast &lt; nums.length) &#123;            <span class="hljs-keyword">if</span> (nums[fast] != val) &#123;                nums[slow] = nums[fast];                slow++;            &#125;            fast++;        &#125;        <span class="hljs-keyword">return</span> slow;    &#125;&#125;</code></pre></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 实现 strStr()</span><span class="hljs-comment"> * 暴力匹配</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/implement-strstr/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_28</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> haystack.length(), m = needle.length();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i + m &lt;= n; i++) &#123;            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;                <span class="hljs-keyword">if</span> (haystack.charAt(i + j) != needle.charAt(j)) &#123;                    flag = <span class="hljs-literal">false</span>;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;            <span class="hljs-keyword">if</span> (flag) &#123;                <span class="hljs-keyword">return</span> i;            &#125;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStrKmp</span><span class="hljs-params">(String haystack, String needle)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> haystack.length(), m = needle.length();        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-type">int</span>[] pi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; needle.charAt(i) != needle.charAt(j)) &#123;                j = pi[j - <span class="hljs-number">1</span>];            &#125;            <span class="hljs-keyword">if</span> (needle.charAt(i) == needle.charAt(j)) &#123;                j++;            &#125;            pi[i] = j;        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;                j = pi[j - <span class="hljs-number">1</span>];            &#125;            <span class="hljs-keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;                j++;            &#125;            <span class="hljs-keyword">if</span> (j == m) &#123;                <span class="hljs-keyword">return</span> i - m + <span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;&#125;</code></pre></div><h1 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a>搜索插入位置</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 搜索插入位置</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 二分查找</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/search-insert-position/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_35</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(searchInsert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;, <span class="hljs-number">2</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length;        <span class="hljs-keyword">while</span> (left &lt; right) &#123;            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) /<span class="hljs-number">2</span>;            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;                <span class="hljs-keyword">return</span> mid;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;                left = mid + <span class="hljs-number">1</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;                right = mid;            &#125;        &#125;        <span class="hljs-keyword">return</span> right;    &#125;&#125;</code></pre></div><h1 id="最后一个单词的长度"><a href="#最后一个单词的长度" class="headerlink" title="最后一个单词的长度"></a>最后一个单词的长度</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 最后一个单词的长度</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems//length-of-last-word/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_58</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(lengthOfLastWord(<span class="hljs-string">&quot;Hello World&quot;</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLastWord</span><span class="hljs-params">(String s)</span> &#123;        <span class="hljs-keyword">if</span> (s.length()==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        String[] res = s.split(<span class="hljs-string">&quot; &quot;</span>);        <span class="hljs-keyword">return</span> res[res.length-<span class="hljs-number">1</span>].length();    &#125;&#125;</code></pre></div><h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 加一</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/plus-one/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_66</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(Arrays.toString(plusOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] plusOne(<span class="hljs-type">int</span>[] digits) &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> digits.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;            <span class="hljs-keyword">if</span>(digits[i] != <span class="hljs-number">9</span>)&#123;                digits[i]++;                <span class="hljs-keyword">return</span> digits;            &#125;            digits[i] = <span class="hljs-number">0</span>;        &#125;        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[digits.length + <span class="hljs-number">1</span>];        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">return</span> arr;    &#125;&#125;</code></pre></div><h1 id="二进制求和"><a href="#二进制求和" class="headerlink" title="二进制求和"></a>二进制求和</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 二进制求和</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/add-binary/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_67</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(addBinary(<span class="hljs-string">&quot;1010&quot;</span>, <span class="hljs-string">&quot;1011&quot;</span>));    &#125;    <span class="hljs-comment">// java leetcode禁止</span><span class="hljs-comment">//    public static String addBinary(String a, String b) &#123;</span><span class="hljs-comment">//        BigInteger b1 = new BigInteger(a, 2);</span><span class="hljs-comment">//        BigInteger b2 = new BigInteger(b, 2);</span><span class="hljs-comment">//        return b1.add(b2).toString(2);</span><span class="hljs-comment">//    &#125;</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">addBinary</span><span class="hljs-params">(String a, String b)</span> &#123;        <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span> || a.length() == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> b;        &#125;        <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">null</span> || b.length() == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> a;        &#125;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length() - <span class="hljs-number">1</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> b.length() - <span class="hljs-number">1</span>;        <span class="hljs-comment">// 进位</span>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;                c += a.charAt(i--) - <span class="hljs-string">&#x27;0&#x27;</span>;            &#125;            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span>) &#123;                c += b.charAt(j--) - <span class="hljs-string">&#x27;0&#x27;</span>;            &#125;            stb.append(c % <span class="hljs-number">2</span>);            c &gt;&gt;= <span class="hljs-number">1</span>;        &#125;        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> stb.reverse().toString();        <span class="hljs-keyword">return</span> c &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;1&#x27;</span> + res : res;    &#125;&#125;</code></pre></div><h1 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根"></a>x 的平方根</h1><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> x 的平方根</span><span class="hljs-comment"> * 二分法</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://leetcode-cn.com/problems/sqrtx/&quot;&gt;&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_69</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(mySqrt(<span class="hljs-number">8</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> x;        <span class="hljs-keyword">while</span> (max - min &gt; <span class="hljs-number">1</span>) &#123;            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (max + min) / <span class="hljs-number">2</span>;            <span class="hljs-keyword">if</span> (x / m &lt; m) &#123;                max = m;            &#125; <span class="hljs-keyword">else</span> &#123;                min = m;            &#125;        &#125;        <span class="hljs-keyword">return</span> min;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-最新餐厅评论</title>
    <link href="/2022/04/24/Redis%E5%BA%94%E7%94%A8-%E6%9C%80%E6%96%B0%E9%A4%90%E5%8E%85%E8%AF%84%E8%AE%BA/"/>
    <url>/2022/04/24/Redis%E5%BA%94%E7%94%A8-%E6%9C%80%E6%96%B0%E9%A4%90%E5%8E%85%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="最新餐厅评论"><a href="#最新餐厅评论" class="headerlink" title="最新餐厅评论"></a>最新餐厅评论</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>展示餐厅的最近十条最新评论</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_reviews` (                             `id` <span class="hljs-type">INT</span> ( <span class="hljs-number">11</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,                             `fk_restaurant_id` <span class="hljs-type">INT</span> ( <span class="hljs-number">11</span> ) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;餐厅外键ID&#x27;</span>,                             `content` <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">1000</span> ) <span class="hljs-type">CHARACTER</span>                                 <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评论内容&#x27;</span>,                             `fk_user_id` <span class="hljs-type">INT</span> ( <span class="hljs-number">11</span> ) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户外键ID&#x27;</span>,                             `like_it` TINYINT ( <span class="hljs-number">11</span> ) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                             `is_valid` TINYINT ( <span class="hljs-number">1</span> ) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                             `create_date` datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                             `update_date` datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                             <span class="hljs-keyword">PRIMARY</span> KEY ( `id` )) ENGINE <span class="hljs-operator">=</span> INNODB <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span><span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_general_ci AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ROW_FORMAT <span class="hljs-operator">=</span> COMPACT;</code></pre></div><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><h3 id="使用Redis-Lists存储"><a href="#使用Redis-Lists存储" class="headerlink" title="使用Redis Lists存储"></a>使用Redis Lists存储</h3><ul><li>添加时，将评论数据<code>LPUSH key value</code>保存到队列</li><li>查询时，利用<code>LRANGE key 0 9</code> 查询前10条数据</li></ul><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 添加餐厅评论</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">add</span><span class="hljs-params">(Reviews reviews)</span> &#123;    <span class="hljs-type">Integer</span> <span class="hljs-variable">restaurantId</span> <span class="hljs-operator">=</span> reviews.getRestaurantId();    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> reviews.getContent();    <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> reviews.getUserId();    <span class="hljs-type">Integer</span> <span class="hljs-variable">likeIt</span> <span class="hljs-operator">=</span> reviews.getLikeIt();    <span class="hljs-comment">// 参数校验</span>    Assert.isFalse(restaurantId == <span class="hljs-literal">null</span> || restaurantId &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;请选择评论的餐厅&quot;</span>);    Assert.isFalse(content.length() &gt; <span class="hljs-number">800</span>, <span class="hljs-string">&quot;评论内容过长，请重新输入&quot;</span>);    <span class="hljs-comment">// 判断餐厅是否存在</span>    <span class="hljs-type">Restaurants</span> <span class="hljs-variable">restaurant</span> <span class="hljs-operator">=</span> restaurantsService.getById(restaurantId);    Assert.isFalse(restaurant == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;该餐厅不存在&quot;</span>);    <span class="hljs-comment">// 插入数据库</span>    reviews = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reviews</span>();    reviews.setContent(content);    reviews.setFkUserId(userId);    reviews.setFkRestaurantId(restaurantId);    <span class="hljs-comment">// 这里需要后台操作处理餐厅数据(喜欢/不喜欢餐厅)做自增处理</span>    reviews.setLikeIt(likeIt);    <span class="hljs-keyword">if</span> (save(reviews)) &#123;        <span class="hljs-comment">// 写入餐厅最新评论</span>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_REVIEWS_KEY + restaurantId;        redisTemplate.opsForList().leftPush(key, reviews);        <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">200</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;评论成功&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;评论失败&quot;</span>);    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询餐厅评论前10条</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">findNewReviews</span><span class="hljs-params">(Reviews reviews)</span> &#123;    <span class="hljs-type">Integer</span> <span class="hljs-variable">restaurantId</span> <span class="hljs-operator">=</span> reviews.getRestaurantId();    <span class="hljs-comment">// 参数校验</span>    Assert.isFalse(restaurantId == <span class="hljs-literal">null</span> || restaurantId &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;请选择餐厅进行查看&quot;</span>);    <span class="hljs-comment">// 获取 Key</span>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_REVIEWS_KEY + restaurantId;    <span class="hljs-comment">// 取前十条</span>    List&lt;Reviews&gt; reviewsList = redisTemplate.opsForList().range(key, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>);    <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">200</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;查询成功&quot;</span>).set(<span class="hljs-string">&quot;data&quot;</span>, reviewsList);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker速查</title>
    <link href="/2022/04/21/Docker%E9%80%9F%E6%9F%A5/"/>
    <url>/2022/04/21/Docker%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><div class="code-wrapper"><pre><code class="hljs shell">yum remove docker \        docker-client \        docker-client-latest \        docker-common \        docker-latest \        docker-latest-logrotate \        docker-logrotate \        docker-engine</code></pre></div><h3 id="设置仓库-安装所需的软件包"><a href="#设置仓库-安装所需的软件包" class="headerlink" title="设置仓库 安装所需的软件包"></a>设置仓库 安装所需的软件包</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install -y yum-utils \device-mapper-persistent-data \lvm2</code></pre></div><h3 id="设置稳定的仓库。"><a href="#设置稳定的仓库。" class="headerlink" title="设置稳定的仓库。"></a>设置稳定的仓库。</h3><div class="code-wrapper"><pre><code class="hljs shell">yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo</code></pre></div><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io</code></pre></div><h3 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl start docker</code></pre></div><h3 id="Docker自启动"><a href="#Docker自启动" class="headerlink" title="Docker自启动"></a>Docker自启动</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl enable docker.service</code></pre></div><h3 id="通过运行-hello-world-映像来验证是否正确安装了-Docker-Engine-Community"><a href="#通过运行-hello-world-映像来验证是否正确安装了-Docker-Engine-Community" class="headerlink" title="通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community"></a>通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run hello-world</code></pre></div><h3 id="获取-container-ID-或者名字"><a href="#获取-container-ID-或者名字" class="headerlink" title="获取 container ID 或者名字"></a>获取 container ID 或者名字</h3><div class="code-wrapper"><pre><code class="hljs shell">docker container ls -a</code></pre></div><h3 id="如果你要删除的-container-还是运行状态，那么就要先把容器停止了："><a href="#如果你要删除的-container-还是运行状态，那么就要先把容器停止了：" class="headerlink" title="如果你要删除的 container 还是运行状态，那么就要先把容器停止了："></a>如果你要删除的 container 还是运行状态，那么就要先把容器停止了：</h3><div class="code-wrapper"><pre><code class="hljs shell">docker  container  stop   CONTAINER_ID</code></pre></div><h3 id="删除指定的container"><a href="#删除指定的container" class="headerlink" title="删除指定的container"></a>删除指定的container</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这两条命令都是删除同一个容器</span>docker   container  rm  CONTAINER_ID  或者 docker  container  rm  CONTAINER_NAME</code></pre></div><h3 id="批量获取容器ID"><a href="#批量获取容器ID" class="headerlink" title="批量获取容器ID"></a>批量获取容器ID</h3><div class="code-wrapper"><pre><code class="hljs shell">docker container ls -a -q</code></pre></div><h3 id="批量获取镜像ID"><a href="#批量获取镜像ID" class="headerlink" title="批量获取镜像ID"></a>批量获取镜像ID</h3><div class="code-wrapper"><pre><code class="hljs shell">docker image ls -a -q</code></pre></div><h3 id="批量停止容器"><a href="#批量停止容器" class="headerlink" title="批量停止容器"></a>批量停止容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker container   stop   (docker  container  ls   -a  -q)</code></pre></div><h3 id="批量删除容器"><a href="#批量删除容器" class="headerlink" title="批量删除容器"></a>批量删除容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker   container   rm  (docker  container  ls   -a  -q)</code></pre></div><h3 id="批量删除镜像"><a href="#批量删除镜像" class="headerlink" title="批量删除镜像"></a>批量删除镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker  image   rm   (docker  image  ls   -a  -q)</code></pre></div><h3 id="通过image的id来指定删除镜像"><a href="#通过image的id来指定删除镜像" class="headerlink" title="通过image的id来指定删除镜像"></a>通过image的id来指定删除镜像</h3><div class="code-wrapper"><pre><code class="hljs shell"> docker rmi &lt;image id&gt;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">想要删除untagged images，也就是那些<span class="hljs-built_in">id</span>为&lt;None&gt;的image的话可以用</span> docker rmi (docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print 3&#125;&quot;)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">要删除全部images</span> docker rmi (docker images -q)</code></pre></div><h2 id="dnf安装-Doceker"><a href="#dnf安装-Doceker" class="headerlink" title="dnf安装 Doceker"></a>dnf安装 Doceker</h2><h3 id="安装软件库"><a href="#安装软件库" class="headerlink" title="安装软件库"></a>安装软件库</h3><div class="code-wrapper"><pre><code class="hljs shell">dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo</code></pre></div><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><div class="code-wrapper"><pre><code class="hljs shell">dnf install -y docker-ce</code></pre></div><h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl enable dockersystemctl start docker</code></pre></div><h3 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h3><div class="code-wrapper"><pre><code class="hljs shell">dnf -y remove docker-engine.x86_64rm -rf /var/lib/docker</code></pre></div><h3 id="Docker镜像加速下载"><a href="#Docker镜像加速下载" class="headerlink" title="Docker镜像加速下载"></a>Docker镜像加速下载</h3><p><a href="https://cr.console.aliyun.com/">阿里云–容器镜像服务–镜像加速器</a></p><div class="code-wrapper"><pre><code class="hljs awk">sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker sudo tee <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span> &#123;<span class="hljs-string">&quot;registry-mirrors&quot;</span>: [    <span class="hljs-string">&quot;https://wbktaw0y.mirror.aliyuncs.com&quot;</span>,    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]&#125; EOFsudo systemctl daemon-reload sudo systemctl restart docker</code></pre></div><h2 id="Docker-搜索"><a href="#Docker-搜索" class="headerlink" title="Docker 搜索"></a>Docker 搜索</h2><h3 id="按名称搜索镜像-多数这种"><a href="#按名称搜索镜像-多数这种" class="headerlink" title="按名称搜索镜像(多数这种)"></a>按名称搜索镜像(多数这种)</h3><div class="code-wrapper"><pre><code class="hljs shell">docker search xxx</code></pre></div><h3 id="按名称搜索镜像并显示非截断描述"><a href="#按名称搜索镜像并显示非截断描述" class="headerlink" title="按名称搜索镜像并显示非截断描述"></a>按名称搜索镜像并显示非截断描述</h3><div class="code-wrapper"><pre><code class="hljs shell">docker search --no-trunc xxx</code></pre></div><h3 id="按名称“xxx”搜索出星数至少为3颗星的镜像"><a href="#按名称“xxx”搜索出星数至少为3颗星的镜像" class="headerlink" title="按名称“xxx”搜索出星数至少为3颗星的镜像"></a>按名称“xxx”搜索出星数至少为3颗星的镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker search --filter stars=3 xxx</code></pre></div><h3 id="显示名称中包含“xxx”的镜像，并且是自动构建"><a href="#显示名称中包含“xxx”的镜像，并且是自动构建" class="headerlink" title="显示名称中包含“xxx”的镜像，并且是自动构建"></a>显示名称中包含“xxx”的镜像，并且是自动构建</h3><div class="code-wrapper"><pre><code class="hljs shell">docker search --filter is-automated xxx</code></pre></div><h3 id="显示的图像名称包含“xxx”，至少3颗星，并且是官方版本"><a href="#显示的图像名称包含“xxx”，至少3颗星，并且是官方版本" class="headerlink" title="显示的图像名称包含“xxx”，至少3颗星，并且是官方版本"></a>显示的图像名称包含“xxx”，至少3颗星，并且是官方版本</h3><div class="code-wrapper"><pre><code class="hljs shell">docker search --filter &quot;is-official=true&quot; --filter &quot;stars=3&quot; xxx</code></pre></div><h3 id="格式化选项（–format）使用Go模板漂亮地打印搜索输出。"><a href="#格式化选项（–format）使用Go模板漂亮地打印搜索输出。" class="headerlink" title="格式化选项（–format）使用Go模板漂亮地打印搜索输出。"></a>格式化选项（–format）使用Go模板漂亮地打印搜索输出。</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.使用不带标头的模板,Name并StarCount为所有图像输出 以冒号分隔的条目和条目：</span>docker search --format &quot;&#123;&#123;.Name&#125;&#125;:&#123;&#123;.StarCount&#125;&#125;&quot; xxx<span class="hljs-meta prompt_"># </span><span class="language-bash">2.输出表格格式:</span>docker search --format &quot;table &#123;&#123;.Name&#125;&#125;\t&#123;&#123;.IsAutomated&#125;&#125;\t&#123;&#123;.IsOfficial&#125;&#125;&quot; xxx</code></pre></div><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull tomcat</code></pre></div><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -di --restart=always  -v /data/tomcat/webapp:/usr/local/tomcat/webapp/ --name tomcat -p 8080:8080 tomcat</code></pre></div><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull nginx</code></pre></div><h3 id="创建容器-1"><a href="#创建容器-1" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -di --name nginx -p 80:80 nginx</code></pre></div><h3 id="将容器内的配置文件拷贝到指定目录（请先提前创建好目录）。"><a href="#将容器内的配置文件拷贝到指定目录（请先提前创建好目录）。" class="headerlink" title="将容器内的配置文件拷贝到指定目录（请先提前创建好目录）。"></a>将容器内的配置文件拷贝到指定目录（请先提前创建好目录）。</h3><div class="code-wrapper"><pre><code class="hljs shell">docker cp nginx:/etc/nginx /data/nginx/conf</code></pre></div><h3 id="终止并删除容器"><a href="#终止并删除容器" class="headerlink" title="终止并删除容器"></a>终止并删除容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker stop nginx;docker rm nginx</code></pre></div><h3 id="创建-Nginx-容器"><a href="#创建-Nginx-容器" class="headerlink" title="创建 Nginx 容器"></a>创建 Nginx 容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -di --name nginx -p 80:80 -v /data/nginx/conf:/etc/nginx nginx</code></pre></div><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="拉取镜像-2"><a href="#拉取镜像-2" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull mysql:8.0.21</code></pre></div><h3 id="创建容器-2"><a href="#创建容器-2" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -di --name mysql8 -p 3306:3306 \-v /data/mysql/conf:/etc/mysql/conf.d \-v /data/mysql/logs:/logs \-v /data/mysql/data:/var/lib/mysql \-e MYSQL_ROOT_PASSWORD=root mysql:8.0.21</code></pre></div><p>-e：代表添加环境变量 <code>MYSQL_ROOT_PASSWORD</code> 是 root 用户的登陆密码。</p><p>进入容器并使用 MySQL 命令打开客户端。</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器</span> docker exec -it mysql8 /bin/bash<span class="hljs-meta prompt_"># </span><span class="language-bash">使用 MySQL 命令打开客户端</span> mysql -uroot -proot --default-character-set=utf8</code></pre></div><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="拉取镜像-3"><a href="#拉取镜像-3" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><h5 id="不指定版本-则拉取最新版本的镜像"><a href="#不指定版本-则拉取最新版本的镜像" class="headerlink" title="不指定版本,则拉取最新版本的镜像"></a>不指定版本,则拉取最新版本的镜像</h5><div class="code-wrapper"><pre><code class="hljs shell">docker pull redis</code></pre></div><h5 id="指定版本"><a href="#指定版本" class="headerlink" title="指定版本"></a>指定版本</h5><div class="code-wrapper"><pre><code class="hljs shell">docker pull redis:5.0.5</code></pre></div><h4 id="查看拉取成功的镜像"><a href="#查看拉取成功的镜像" class="headerlink" title="查看拉取成功的镜像"></a>查看拉取成功的镜像</h4><div class="code-wrapper"><pre><code class="hljs shell">docker images</code></pre></div><h3 id="创建容器-3"><a href="#创建容器-3" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run --name redis -p 6379:6379 --restart=always -v /data/redis:/data/  -d redis redis-server --appendonly yes</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">本地运行</span>  -d<span class="hljs-meta prompt_"># </span><span class="language-bash">本地端口:Docker端口</span>  6379:6379<span class="hljs-meta prompt_"># </span><span class="language-bash">指定驱动盘</span>  -v<span class="hljs-meta prompt_"># </span><span class="language-bash">Redis的持久化文件存储</span>  PWD/data<span class="hljs-meta prompt_"># </span><span class="language-bash">docker的镜像名</span>  redis<span class="hljs-meta prompt_"># </span><span class="language-bash">redis服务器</span>  redis-server<span class="hljs-meta prompt_"># </span><span class="language-bash">开启持久化</span>  --appendonly yes<span class="hljs-meta prompt_"># </span><span class="language-bash">这个运行的镜像的名称</span>  --name<span class="hljs-meta prompt_"># </span><span class="language-bash">Docker启动容器就启动</span>  --restart=always<span class="hljs-meta prompt_"># </span><span class="language-bash">密码</span>  --requirepass &quot;密码&quot;</code></pre></div><h4 id="停止正在运行的镜像-redis为前面设置的镜像名称"><a href="#停止正在运行的镜像-redis为前面设置的镜像名称" class="headerlink" title="停止正在运行的镜像(redis为前面设置的镜像名称)"></a>停止正在运行的镜像(redis为前面设置的镜像名称)</h4><div class="code-wrapper"><pre><code class="hljs shell">docker  container  stop   redis</code></pre></div><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><div class="code-wrapper"><pre><code class="hljs shell">docker rm redis</code></pre></div><h4 id="重启镜像"><a href="#重启镜像" class="headerlink" title="重启镜像"></a>重启镜像</h4><div class="code-wrapper"><pre><code class="hljs shell">docker start redis</code></pre></div><h4 id="访问容器"><a href="#访问容器" class="headerlink" title="访问容器"></a>访问容器</h4><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it redis bash</code></pre></div><h4 id="使用redis-cli访问容器内redis"><a href="#使用redis-cli访问容器内redis" class="headerlink" title="使用redis-cli访问容器内redis"></a>使用redis-cli访问容器内redis</h4><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it redis redis-cli</code></pre></div><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="拉取镜像-4"><a href="#拉取镜像-4" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull mongo</code></pre></div><h3 id="创建容器-4"><a href="#创建容器-4" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -di --restart=always --name mongo -p 27017:27017 mongo</code></pre></div><h2 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h2><h3 id="拉取镜像-5"><a href="#拉取镜像-5" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull solr</code></pre></div><h3 id="创建容器-5"><a href="#创建容器-5" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -di --restart=always --name=solr -p 8983:8983 solr</code></pre></div><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="拉取镜像-带管理页面版，省去了许多配置"><a href="#拉取镜像-带管理页面版，省去了许多配置" class="headerlink" title="拉取镜像(带管理页面版，省去了许多配置)"></a>拉取镜像(带管理页面版，省去了许多配置)</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull rabbitmq:3.9-management</code></pre></div><h3 id="创建容器-6"><a href="#创建容器-6" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell"> docker run -p 5671:5617 -p 5672:5672 -p 4369:4369 -p 15671:15671 -p 15672:15672 -p 25672:25672 \-e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=root \-d  --name rabbitmq  rabbitmq:3.9-management</code></pre></div><h3 id="进入容器并开启管理功能"><a href="#进入容器并开启管理功能" class="headerlink" title="进入容器并开启管理功能"></a>进入容器并开启管理功能</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器</span> docker exec -it rabbitmq /bin/bash<span class="hljs-meta prompt_"># </span><span class="language-bash">如果没开启，则开启 RabbitMQ 管理功能</span> rabbitmq-plugins enable rabbitmq_management</code></pre></div><h3 id="3-9-x延迟队列插件下载"><a href="#3-9-x延迟队列插件下载" class="headerlink" title="3.9.x延迟队列插件下载"></a>3.9.x延迟队列插件下载</h3><div class="code-wrapper"><pre><code class="hljs shell">mkdir -p  /docker/rabbitmq/plugins/cd  /docker/rabbitmq/plugins/wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.9.0/rabbitmq_delayed_message_exchange-3.9.0.ezdocker cp /docker/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.9.0.ez rabbitmq:/pluginsdocker exec -it rabbitmq /bin/bashcd /pluginsrabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></pre></div><h4 id="新添加一个账户"><a href="#新添加一个账户" class="headerlink" title="新添加一个账户"></a>新添加一个账户</h4><p>默认的<code>guest</code> 账户有访问限制，默认只能通过本地网络(如 localhost) 访问，远程网络访问受限，所以在使用时我们一般另外添加用户，例如我们添加一个root用户：</p><h5 id="进入到rabbitMq容器内部，添加用户，用户名为root-密码为root"><a href="#进入到rabbitMq容器内部，添加用户，用户名为root-密码为root" class="headerlink" title="进入到rabbitMq容器内部，添加用户，用户名为root,密码为root"></a>进入到rabbitMq容器内部，添加用户，用户名为root,密码为root</h5><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">/# </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -i -t rabbitmq bin/shell</span><span class="hljs-meta prompt_">/# </span><span class="language-bash">rabbitmqctl add_user root root</span></code></pre></div><h5 id="赋予root用户所有权限"><a href="#赋予root用户所有权限" class="headerlink" title="赋予root用户所有权限"></a>赋予root用户所有权限</h5><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">/# </span><span class="language-bash">rabbitmqctl set_permissions -p / root <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span></span></code></pre></div><h5 id="赋予root用户administrator角色"><a href="#赋予root用户administrator角色" class="headerlink" title="赋予root用户administrator角色"></a>赋予root用户administrator角色</h5><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">/# </span><span class="language-bash">rabbitmqctl set_user_tags root administrator</span></code></pre></div><h5 id="查看所有用户即可看到root用户已经添加成功"><a href="#查看所有用户即可看到root用户已经添加成功" class="headerlink" title="查看所有用户即可看到root用户已经添加成功"></a>查看所有用户即可看到root用户已经添加成功</h5><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">/# </span><span class="language-bash">rabbitmqctl list_users</span>Listing users ...usertagsguest[administrator]root[administrator]</code></pre></div><p>执行<code>exit</code>命令，从容器内部退出即可。</p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="拉取镜像-6"><a href="#拉取镜像-6" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull elasticsearch:6.5.3</code></pre></div><h3 id="创建容器-7"><a href="#创建容器-7" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell"> docker run -di --name es \-p 9200:9200 -p 9300:9300 \-e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms512m -Xmx2048m&quot; \-v /data/es:/root/ \elasticsearch:6.5.3</code></pre></div><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it es /bin/bash</code></pre></div><h3 id="安装-ik-分词器："><a href="#安装-ik-分词器：" class="headerlink" title="安装 ik 分词器："></a>安装 ik 分词器：</h3><div class="code-wrapper"><pre><code class="hljs shell">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.3/elasticsearch-analysis-ik-6.5.3.zip</code></pre></div><h3 id="修改-es-配置文件："><a href="#修改-es-配置文件：" class="headerlink" title="修改 es 配置文件："></a>修改 es 配置文件：</h3><div class="code-wrapper"><pre><code class="hljs shell">vi ./config/elasticsearch.yml</code></pre></div><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">&quot;docker-cluster&quot;</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-comment"># minimum_master_nodes need to be explicitly set when bound on a public IP</span><span class="hljs-comment"># set to 1 to allow single node clusters</span><span class="hljs-comment"># Details: https://github.com/elastic/elasticsearch/pull/17288</span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-comment"># just for elasticsearch-head plugin</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span></code></pre></div><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">/# </span><span class="language-bash"><span class="hljs-built_in">exit</span></span></code></pre></div><h3 id="重启容器："><a href="#重启容器：" class="headerlink" title="重启容器："></a>重启容器：</h3><div class="code-wrapper"><pre><code class="hljs shell">docker restart es</code></pre></div><h2 id="XXL-job"><a href="#XXL-job" class="headerlink" title="XXL-job"></a>XXL-job</h2><h3 id="拉取镜像-7"><a href="#拉取镜像-7" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull  xuxueli/xxl-job-admin</code></pre></div><h3 id="创建容器-8"><a href="#创建容器-8" class="headerlink" title="创建容器"></a>创建容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run \-e PARAMS=&quot;--spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai--spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver--spring.datasource.username=root--spring.datasource.password=123456--xxl.job.login.username=admin--xxl.job.login.password=admin--spring.mail.host=smtp.qq.com--spring.mail.username=xxx@qq.com--spring.mail.password=xxx--spring.mail.port=465--spring.mail.from=xxx@qq.com&quot; \-p 18080:8080 \-v /data/xxl-jobs:/data/applogs \--name xxl-job-admin \ -d xuxueli/xxl-job-admin</code></pre></div><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull alexeiled/docker-oracle-xe-11g</code></pre></div><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -d  --name oracle --shm-size=1g -p 1521:1521 alexeiled/docker-oracle-xe-11g</code></pre></div><h3 id="进入容器-1"><a href="#进入容器-1" class="headerlink" title="进入容器"></a>进入容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it  oracle /bin/bash</code></pre></div><h3 id="登录oracle"><a href="#登录oracle" class="headerlink" title="登录oracle"></a>登录oracle</h3><div class="code-wrapper"><pre><code class="hljs shell">sqlplus system/oracle</code></pre></div><h3 id="创建用户并分配权限"><a href="#创建用户并分配权限" class="headerlink" title="创建用户并分配权限"></a>创建用户并分配权限</h3><div class="code-wrapper"><pre><code class="hljs shell">create user 用户名 identified by 密码;</code></pre></div><h3 id="给用户deque赋予connect-resource角色，这俩角色含有许多权限"><a href="#给用户deque赋予connect-resource角色，这俩角色含有许多权限" class="headerlink" title="给用户deque赋予connect,resource角色，这俩角色含有许多权限."></a>给用户deque赋予connect,resource角色，这俩角色含有许多权限.</h3><p>connect:是保证该用户能连接数据库;<br>resource:是该用户可以使用数据库资源。</p><div class="code-wrapper"><pre><code class="hljs shell">grant connect,resource to 用户名;</code></pre></div><h3 id="使用navicat创建连接。"><a href="#使用navicat创建连接。" class="headerlink" title="使用navicat创建连接。"></a>使用navicat创建连接。</h3><p><img src="https://img.hugqq.com/img/20201026/97SrAgfCgcKn.png" alt="mark"></p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><span class="hljs-attr">port:</span> <span class="hljs-number">1521</span><span class="hljs-attr">sid:</span> <span class="hljs-string">xe</span><span class="hljs-attr">username:</span> <span class="hljs-string">用户名</span><span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><span class="hljs-string">最初system和sys的默认密码都是oracle</span></code></pre></div><h2 id="kkfileview"><a href="#kkfileview" class="headerlink" title="kkfileview"></a>kkfileview</h2><h3 id="拉取-1"><a href="#拉取-1" class="headerlink" title="拉取"></a>拉取</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull keking/kkfileview</code></pre></div><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -it -d  -p 8012:8012 --name kkfileview  keking/kkfileview</code></pre></div><h3 id="建立外部管理目录"><a href="#建立外部管理目录" class="headerlink" title="建立外部管理目录"></a>建立外部管理目录</h3><div class="code-wrapper"><pre><code class="hljs shell">mkdir -p /home/kkfileview/conf</code></pre></div><h3 id="进入docker-shell"><a href="#进入docker-shell" class="headerlink" title="进入docker shell"></a>进入docker shell</h3><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it  kkfileview shell</code></pre></div><h3 id="查询文件位置"><a href="#查询文件位置" class="headerlink" title="查询文件位置"></a>查询文件位置</h3><div class="code-wrapper"><pre><code class="hljs shell">find /opt -name  application.properties</code></pre></div><h3 id="将容器内的配置文件拷贝到指定目录"><a href="#将容器内的配置文件拷贝到指定目录" class="headerlink" title="将容器内的配置文件拷贝到指定目录"></a>将容器内的配置文件拷贝到指定目录</h3><div class="code-wrapper"><pre><code class="hljs shell">docker cp kkfileview:/opt/kkFileView-4.1.0-SNAPSHOT/config/application.properties  /home/kkfileview/conf</code></pre></div><h3 id="退出docker-shell"><a href="#退出docker-shell" class="headerlink" title="退出docker shell"></a>退出docker shell</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">/# </span><span class="language-bash"><span class="hljs-built_in">exit</span></span></code></pre></div><h3 id="停止删除-kkfileview镜像"><a href="#停止删除-kkfileview镜像" class="headerlink" title="停止删除 kkfileview镜像"></a>停止删除 kkfileview镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker stop kkfileview; docker rm kkfileview</code></pre></div><h3 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run -it -d  -p 8012:8012 -v /home/kkfileview/conf/application.properties:/opt/kkFileView-4.1.0-SNAPSHOT/config/application.properties --name kkfileview  keking/kkfileview;docker logs -f kkfileview</code></pre></div><h3 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx conf配置"></a>nginx conf配置</h3><div class="code-wrapper"><pre><code class="hljs nginx"> <span class="hljs-section">location</span> /file &#123;   <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8012;<span class="hljs-attribute">proxy_set_header</span> Upgrade http_upgrade;<span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>; <span class="hljs-attribute">proxy_set_header</span> Host host:server_port;  <span class="hljs-attribute">proxy_set_header</span> X-Real-IP  remote_addr;<span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For proxy_add_x_forwarded_for; &#125;</code></pre></div><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><div class="code-wrapper"><pre><code class="hljs http">https://xxx.com/flie/index</code></pre></div><h3 id="预览路径"><a href="#预览路径" class="headerlink" title="预览路径"></a>预览路径</h3><div class="code-wrapper"><pre><code class="hljs http">https://xxx.com/file/onlinePreview?url=</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-缓存功能</title>
    <link href="/2022/04/17/Redis%E5%BA%94%E7%94%A8-%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/04/17/Redis%E5%BA%94%E7%94%A8-%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="缓存功能"><a href="#缓存功能" class="headerlink" title="缓存功能"></a>缓存功能</h1><h2 id="缓存概念"><a href="#缓存概念" class="headerlink" title="缓存概念"></a>缓存概念</h2><p>缓存是介于应用程序和物理数据源之间，其作用是为了降低应用程序对物理数据源访问的频次，从而提高了应用的运行性能。缓存内的数据是对物理数据源中的数据的复制，应用程序在运行时从缓存读写数据，在特定的时刻或事件会同步缓存和物理数据源的数据。比如我们通常是直接查询MySQL数据库，那在高并发情况下，大量查询MySQL数据库会导致数据库性能变慢，因此我们在应用层与MySQL之间搭建一个Cache层，让请求先访问Cache，这样就能大大降低数据库的压力，提高性能。</p><h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><p>在分布式系统开发中，系统与系统之间都属于进程级别，缓存系统也能跨进程叫分布式缓存，市面上分布式缓存技术有Memcached和Redis这两种。二者区别大致如下：</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>性能上都很出色，具体到细节，由于Redis只使用单核，而Memcached可以使用多核，所以平均每一个核上Redis在存储小数据时比Memcached性能更高。而在100K以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起 Memcached，还是稍有逊色。</p><h3 id="内存空间和数据量大小"><a href="#内存空间和数据量大小" class="headerlink" title="内存空间和数据量大小"></a>内存空间和数据量大小</h3><p>MemCached可以修改最大内存，采用LRU算法。Redis增加了VM的特性，突破了物理内存的限制。</p><h3 id="操作比较"><a href="#操作比较" class="headerlink" title="操作比较"></a>操作比较</h3><p>MemCached数据结构单一，仅用来缓存数据，而Redis支持更加丰富的数据类型，也可以在服务器端直接对数据进行丰富的操作,这样可以减少网络IO次数和数据体积。</p><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>MemCached不支持数据持久化，断电或重启后数据消失，但其稳定性是有保证的。Redis支持数据持久化和数据恢复，允许单点故障，但是同时也会付出性能的代价。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>Memcached：动态系统中减轻数据库负载，提升性能；做缓存，适合多读少写。 Redis：适用于对读写效率要求都很高，数据处理业务复杂和对安全性要求较高的系统。</p><h3 id="需要慎重考虑的部分"><a href="#需要慎重考虑的部分" class="headerlink" title="需要慎重考虑的部分"></a><strong>需要慎重考虑的部分</strong></h3><ol><li>Memcached单个key-value大小有限，一个value最大只支持1MB，而Redis最大支持512MB</li><li>Memcached只是个内存缓存，对可靠性无要求；而Redis更倾向于内存数据库，因此对对可靠性方 面要求比较高</li><li>从本质上讲，Memcached只是一个单一key-value内存Cache；而Redis则是一个数据结构内存数据 库，支持多种数据类型，因此Redis除单纯缓存作用外，还可以处理一些简单的逻辑运算，Redis不 仅可以缓存，而且还可以作为数据库用</li><li>Redis还可以集群分布式，也就是说集群本身均衡客户端请求，各个节点可以交流，可拓展行、可 维护性更强大。而Memcached的集群则通过第三方才能搭建</li></ol><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>使用Redis做缓存的话，数据的存储结构有两种，一种采用<code>strings</code>存储，另外使用<code>hashes</code>存储。那使用哪种更好呢？得具体情况具体分析：</p><ul><li><code>strings</code>存储比较简单的，固定的数据，比如存储一个简单的用户信息(用户名、昵称、头像、年龄等)。存储时需要将数据进行序列化，获取时要反序列化。在数据量较小的情况下还是可以忽略这种开销的</li><li>但如果存储的的数据可能某些属性会有些变化，比如餐厅数据中，它有likeVotes(喜欢)和dislikeVotes(不喜欢)的数量，这类变的数据，那么我们采用<code>hashes</code>会更好，而且存储的时候没有序列化开销</li><li>官方推荐使用<code>hashes</code></li></ul><h3 id="加入缓存"><a href="#加入缓存" class="headerlink" title="加入缓存"></a>加入缓存</h3><p>将餐厅添加到缓存时有<strong>全量添加</strong>和<strong>增量添加</strong></p><h4 id="全量添加"><a href="#全量添加" class="headerlink" title="全量添加"></a>全量添加</h4><p>在某些特殊情况，比如初始化数据或缓存出现异常，没有将数据进行同步时，这时需要进行全量的数据同步。</p><p>全量同步方式有两种：一种是<strong>逐条插入</strong>，另一种是<strong>批量插入</strong>，下面对两种方式进行对比：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 逐行插入</span><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSyncForHash</span><span class="hljs-params">()</span> &#123;    List&lt;Restaurants&gt; restaurants = restaurantsService.list();    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();    restaurants.forEach(restaurant -&gt; &#123;        Map&lt;String, Object&gt; restaurantMap = BeanUtil.beanToMap(restaurant);        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_POINTS_KEY + restaurant.getId();        redisTemplate.opsForHash().putAll(key, restaurantMap);    &#125;);    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();    log.info(<span class="hljs-string">&quot;执行时间：&#123;&#125;&quot;</span>, end - start);&#125;</code></pre></div><p>逐条插入就是遍历数据集，使用<code>redisTemplate.opsForHash().putAll(key, restaurantMap);</code>插入即可</p><h5 id="Pipeline管道批量插入"><a href="#Pipeline管道批量插入" class="headerlink" title="Pipeline管道批量插入"></a>Pipeline管道批量插入</h5><p>批量插入使用<code>pipeline</code>指令完成。</p><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。当请求进来以后，都是经过服务器进行返回，那如果服务器没有响应时，那么其他请求进入等待。这时服务器也无法处理新请求，那有没有办法解决呢？使用管道就能解决，即：将<em>多个命令</em>发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。这种技术应用非常广泛比如MySQL的批量插入就如此。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Pipeline 管道插入</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSyncForHashPipeline</span><span class="hljs-params">()</span> &#123;       List&lt;Restaurants&gt; restaurants = restaurantsService.list();       <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();       List&lt;Long&gt; list = redisTemplate.executePipelined((RedisCallback&lt;Long&gt;) connection -&gt; &#123;           <span class="hljs-keyword">for</span> (Restaurants restaurant : restaurants) &#123;               <span class="hljs-keyword">try</span> &#123;                   <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_POINTS_KEY + restaurant.getId();                   Map&lt;String, Object&gt; restaurantMap = BeanUtil.beanToMap(restaurant);                   <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();                   <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);                   Map&lt;<span class="hljs-type">byte</span>[], <span class="hljs-type">byte</span>[]&gt; restaurantStringMap = Maps.newHashMap();                   restaurantMap.forEach((k, v) -&gt; &#123;                       restaurantStringMap.put(stringRedisSerializer.serialize(k), jackson2JsonRedisSerializer.serialize(v));                   &#125;);                   connection.hMSet(stringRedisSerializer.serialize(key), restaurantStringMap);               &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                   log.info(restaurant.toString());                   <span class="hljs-keyword">continue</span>;               &#125;           &#125;           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;       &#125;);       <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();       log.info(<span class="hljs-string">&quot;执行时间：&#123;&#125;&quot;</span>, end - start);   &#125;</code></pre></div><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>先查询缓存 –&gt; 缓存没有 –&gt; 查询数据库（在更新缓存）</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">getByIdCache</span><span class="hljs-params">(String id)</span> &#123;      <span class="hljs-type">Dict</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Dict.create();      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_POINTS_KEY + id;      <span class="hljs-type">LinkedHashMap</span> <span class="hljs-variable">restaurantMap</span> <span class="hljs-operator">=</span> (LinkedHashMap) redisTemplate.opsForHash().entries(key);      <span class="hljs-comment">// 如果缓存不存在，查询数据库</span>      <span class="hljs-type">Restaurants</span> <span class="hljs-variable">restaurant</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;      <span class="hljs-keyword">if</span> (restaurantMap == <span class="hljs-literal">null</span> || restaurantMap.isEmpty()) &#123;          log.info(<span class="hljs-string">&quot;缓存失效了，查询数据库：&#123;&#125;&quot;</span>, id);          <span class="hljs-comment">// 查询数据库</span>          restaurant = getById(id);          <span class="hljs-keyword">if</span> (restaurant != <span class="hljs-literal">null</span>) &#123;              <span class="hljs-comment">// 更新缓存</span>              redisTemplate.opsForHash().putAll(key, BeanUtil.beanToMap(restaurant));          &#125;      &#125; <span class="hljs-keyword">else</span> &#123;          restaurant = BeanUtil.fillBeanWithMap(restaurantMap,                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Restaurants</span>(), <span class="hljs-literal">false</span>);      &#125;      r.put(<span class="hljs-string">&quot;data&quot;</span>, restaurant);      <span class="hljs-keyword">return</span> r;  &#125;</code></pre></div><h2 id="缓存异常解决"><a href="#缓存异常解决" class="headerlink" title="缓存异常解决"></a>缓存异常解决</h2><h3 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h3><h4 id="一致指的是："><a href="#一致指的是：" class="headerlink" title="一致指的是："></a>一致指的是：</h4><p>缓存中有数据，那么，缓存的数据值需要和数据库中的值相同；缓存中本身没有数据，那么，数据库中的值必须是最新值。</p><p>解决方案：</p><p>网上讲的都挺垃圾的</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。做类电商项目的时候，把这货就称为“爆款”。</p><p>解决方案：</p><p>其实，大多数情况下这种爆款很难对数据库服务器造成压垮性的压力。达到这个级别的公司没有几家的。所以，对主打商品都是早早的做好了准备，让缓存永不过期。即便某些商品自己发酵成了爆款，也是直接设为永不过期就好了。</p><p>(1) 从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。</p><p>(2) 从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期。</p><p>(3) 配置spring-cache spring.cache.redis.cache-null-values=true  这个缓存时间要设的少一点，例如15秒就够，如果设置过长，会导致正常的缓存也无法使用。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透，是指查询一个数据库一定不存在的数据。正常的使用缓存流程大致是，数据查询先进行缓存查询，如果key不存在或者key已经过期，再对数据库进行查询，并把查询到的对象，放进缓存。如果数据库查询对象为空，则不放进缓存，就会每次都去查询数据库，而每次查询都是空，每次又都不会进行缓存。假如有恶意攻击，就可以利用这个漏洞，对数据库造成压力，甚至压垮数据库，导致所有的请求都怼到数据库上，从而数据库连接异常。</p><p>解决方案:</p><p>(1)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</p><p>(2)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。</p><p>(3)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。</p><p>(4) 如果从数据库查询的对象为空，也放入缓存，只是设定的缓存过期时间较短，比如设置为60秒。</p><p>(5) @Cacheable(cacheNames=”xxx”, sync=”true”)</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩，是指缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p><p>产生雪崩的原因之一，比如商城马上就要到双十一零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。</p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，那么那个时候数据库也是可以顶住压力的，无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><p>解决方案：</p><p>做电商项目的时候，一般是采取不同分类商品，缓存不同周期。在同一分类中的商品，加上一个随机因子。这样能尽可能分散缓存过期时间，而且，热门类目的商品缓存时间长一些，冷门类目的商品缓存时间短一些，也能节省缓存服务的资源。</p><p>(1)给缓存的失效时间，加上一个随机值，避免集体失效。</p><p>(2)使用互斥锁，但是该方案吞吐量明显下降了。</p><p>(3)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。然后细分以下几个小点</p><p>a. 从缓存A读数据，有则直接返回</p><p>b. A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。</p><p>c. 更新线程同时更新缓存A和缓存B。</p><p>(4)雪崩时进行服务降级。降级的最终目的是保证核心服务可用，即使是有损的。非核心数据直接返回默认值或错误。</p><p>(5)限流熔断，当数据库负载突升时，暂停业务应用对缓存的访问。</p><h3 id="缓存淘汰"><a href="#缓存淘汰" class="headerlink" title="缓存淘汰"></a>缓存淘汰</h3><h4 id="最大内存参数"><a href="#最大内存参数" class="headerlink" title="最大内存参数"></a>最大内存参数</h4><p>我们的redis数据库的最大缓存、主键失效、淘汰机制等参数都是通过配置文件来配置的。这个文件是我们的redis.config文件。</p><p><code>maxmemory &lt;bytes&gt;</code>：设置最大内存</p><h4 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h4><p>截至目前 redis 一共为我们提供了八个不同的内存置换策略。很早之前提供了6种。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># maxmemory &lt;bytes&gt;</span><span class="hljs-comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><span class="hljs-comment"># is reached. You can select among five behaviors:</span><span class="hljs-comment">#</span><span class="hljs-comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span><span class="hljs-comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span><span class="hljs-comment"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span><span class="hljs-comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span><span class="hljs-comment"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span><span class="hljs-comment"># allkeys-random -&gt; Remove a random key, any key.</span><span class="hljs-comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><span class="hljs-comment"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span></code></pre></div><p>（1）volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰。</p><p>（2）volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据淘汰。</p><p>（3）volatile-random：从已设置过期时间的数据集中任意选择数据淘汰。</p><p>（4）volatile-lfu：从已设置过期时间的数据集挑选使用频率最低的数据淘汰。</p><p>（5）allkeys-lru：从数据集中挑选最近最少使用的数据淘汰</p><p>（6）allkeys-lfu：从数据集中挑选使用频率最低的数据淘汰</p><p>（7）allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p>（8） no-enviction（驱逐）：禁止驱逐数据，这也是默认策略。意思是当内存不足以容纳新入数据时，新写入操作就会报错，请求可以继续进行，线上任务也不能持续进行，采用no-enviction策略可以保证数据不被丢失。</p><h4 id="淘汰机制的实现"><a href="#淘汰机制的实现" class="headerlink" title="淘汰机制的实现"></a>淘汰机制的实现</h4><p>既然是淘汰，那就需要把这些数据给删除，然后保存新的。</p><p>Redis 删除策略主要有以下几种：</p><ul><li><strong>惰性删除：</strong>master节点每次读取命令时都会检查键是否超时，如果超时则执行del命令删除键对象，之后异步把del命令slave节点，这样可以保证数据复制的一致性，slave节点是永远不会主动去删除超时数据的。</li><li><strong>定时删除：</strong>Redis的master节点在内部定时任务，会循环采样一定数量的键，当发现采样的键过期时，会执行del命令，之后再同步个slave节点。</li><li><strong>主动删除</strong>：当前已用内存超过maxMemory限定时，触发主动清理策略。主动设置的前提是设置了maxMemory的值。</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-附近的人</title>
    <link href="/2022/04/14/Redis%E5%BA%94%E7%94%A8-%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/"/>
    <url>/2022/04/14/Redis%E5%BA%94%E7%94%A8-%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="附近的人"><a href="#附近的人" class="headerlink" title="附近的人"></a>附近的人</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>查询附近1公里的人，同时只需查询出20个即可。</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>解决基于地理位置的搜索，很多数据库都支持：MySQL、MongoDB、Redis等都能支持地理位置的存储。</p><ul><li>当用户登录应用时，或者保持用户登录后用户在使用应用时，客户端是可以时刻获取用户位置信息的（前提是用户要开启位置获取的权限），客户端获取到最新的地理位置后，上传到后端服务器进行更新。</li><li>以当前用户的位置为圆点，距离为半径查询相关的用户展示即可完成</li></ul><h2 id="Redis-GEO常用指令"><a href="#Redis-GEO常用指令" class="headerlink" title="Redis GEO常用指令"></a>Redis GEO常用指令</h2><table><thead><tr><th align="left">命令</th><th align="left">功能</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">GEOADD</td><td align="left">添加地理位置</td><td align="left">GEOADD key longitude latitude member [longitude latitude member …]</td></tr><tr><td align="left">GEODIST</td><td align="left">两点间的距离</td><td align="left">GEODIST key member1 member2 [unit]</td></tr><tr><td align="left">GEOHASH</td><td align="left">返回标准的Geohash值</td><td align="left">GEOHASH key member [member …]</td></tr><tr><td align="left">GEOPOS</td><td align="left">返回key中给定元素的位置信息（经纬度）</td><td align="left">GEOPOS key member [member …]</td></tr><tr><td align="left">GEOREDIUS</td><td align="left">返回以某点为圆心，距离为半径的其他位置元素</td><td align="left">GEOREDIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</td></tr><tr><td align="left">GEORADIUSBYMEMBER</td><td align="left">跟GEOREDIUS一样，只不过圆心是给定的member元素</td><td align="left">GEORADIUSBYMEMBER key longitude latitude radius m | km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</td></tr></tbody></table><h3 id="GEOADD"><a href="#GEOADD" class="headerlink" title="GEOADD"></a>GEOADD</h3><p>GEOADD key longitude latitude member [longitude latitude member …] 添加位置信息</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加单个位置</span>127.0.0.1:0&gt;GEOADD user:location 121.446617 31.205593 &#x27;zhangsan&#x27;&quot;1&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">添加多个位置信息</span>127.0.0.1:0&gt;GEOADD user:location 121.4465774 31.20485103  &#x27;lisi&#x27; 121.44534  31.2031 &#x27;wangwu&#x27;  121.4510648 31.2090667 &#x27;zhangliu&#x27;&quot;3&quot;</code></pre></div><h3 id="GEODIST"><a href="#GEODIST" class="headerlink" title="GEODIST"></a>GEODIST</h3><p>GEODIST key member1 member2 [unit] 计算距离， 其中unit为单位 m|km|ft（英尺）|mi（英里）</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">计算两点间的距离，返回距离的单位是米（m）</span>127.0.0.1:0&gt;GEODIST user:location zhangsan lisi m&quot;82.4241&quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">计算两点间的距离，返回距离的单位是千米（km）</span>127.0.0.1:0&gt;GEODIST user:location zhangsan lisi km&quot;0.0824&quot;</code></pre></div><h3 id="GEOHASH"><a href="#GEOHASH" class="headerlink" title="GEOHASH"></a>GEOHASH</h3><p>GEOHASH key member [member …] 返回一个或多个位置元素的Geohash。保存到Redis中是用Geohash位置52点整数编码。</p><p>GeoHash将二维的经纬度转换成字符串，比如下图展示了北京9个区域的GeoHash字符串，分别是WX4ER，WX4G2、WX4G3等，每一个字符串代表了某一矩形区域。也就是说，这个矩形区域内所有的点（经纬度坐标）都共享相同的GeoHash字符串，这样既可以保护隐私（只表示大概区域位置而不是具体的点），又比较容易做缓存，比如左上角这个区域内的用户不断发送位置信息请求餐馆数据，由于这些用户的GeoHash字符串都是WX4ER，所以可以把WX4ER当作key，把该区域的餐馆信息当作value来进行缓存，而如果不使用GeoHash的话，由于区域内的用户传来的经纬度是各不相同的，很难做缓存。字符串越长，表示的范围越精确。</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">计算某个位置的GeoHash值</span>127.0.0.1:0&gt;GEOHASH user:location zhangsan1) &quot;wtw3e8f9z20&quot;</code></pre></div><h3 id="GEOPOS"><a href="#GEOPOS" class="headerlink" title="GEOPOS"></a>GEOPOS</h3><p>GEOPOS key member [member …]从<code>key</code>里返回所有给定位置元素的位置（经度和纬度）</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">返回zhangsan和lisi的位置信息</span>127.0.0.1:0&gt;GEOPOS user:location zhangsan lisi1) 1) &quot;121.44661813974380493&quot;   2) &quot;31.20559220971455971&quot;2) 1) &quot;121.44657522439956665&quot;   2) &quot;31.20485207113603821&quot;</code></pre></div><h3 id="GEORADIUS"><a href="#GEORADIUS" class="headerlink" title="GEORADIUS"></a>GEORADIUS</h3><p>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</p><p>给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p><p>范围可以使用以下其中一个单位：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p>在给定以下可选项时， 命令会返回额外的信息：</p><ul><li><code>WITHDIST</code>: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</li><li><code>WITHCOORD</code>: 将位置元素的经度和维度也一并返回。</li><li><code>WITHHASH</code>: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li></ul><p>命令默认返回未排序的位置元素。 通过以下两个参数， 用户可以指定被返回位置元素的排序方式：</p><ul><li><code>ASC</code>: 根据中心的位置， 按照从近到远的方式返回位置元素。</li><li><code>DESC</code>: 根据中心的位置， 按照从远到近的方式返回位置元素。</li></ul><p>在默认情况下， GEORADIUS 命令会返回所有匹配的位置元素。 虽然用户可以使用 <strong>COUNT</strong> 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 <code>COUNT</code> 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 <code>COUNT</code> 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以121.446617 31.205593(张三位置)为圆心，3000m为半径，查询返回用户及其位置</span>127.0.0.1:0&gt;GEORADIUS user:location 121.446617 31.205593 3000 m WITHCOORD 1) 1) &quot;wangwu&quot;   2) 1) &quot;121.44534140825271606&quot;      2) &quot;31.20310057881493293&quot;2) 1) &quot;lisi&quot;   2) 1) &quot;121.44657522439956665&quot;      2) &quot;31.20485207113603821&quot;3) 1) &quot;zhangsan&quot;   2) 1) &quot;121.44661813974380493&quot;      2) &quot;31.20559220971455971&quot;4) 1) &quot;zhangliu&quot;   2) 1) &quot;121.45106524229049683&quot;      2) &quot;31.20906731242401833&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">以121.446617 31.205593(张三位置)为圆心，3000m为半径，查询返回用户及其距离(单位是米)</span>127.0.0.1:0&gt;GEORADIUS user:location 121.446617 31.205593 3000 m WITHDIST1) 1) &quot;wangwu&quot;   2) &quot;302.6202&quot;2) 1) &quot;lisi&quot;   2) &quot;82.5066&quot;3) 1) &quot;zhangsan&quot;   2) &quot;0.1396&quot;4) 1) &quot;zhangliu&quot;   2) &quot;573.0651&quot;<span class="hljs-meta prompt_">  </span><span class="hljs-meta prompt_"># </span><span class="language-bash">以121.446617 31.205593(张三位置)为圆心，3000m为半径，查询返回用户及其距离(单位是米) 由近及远</span>47.110.246.98:15&gt;GEORADIUS user:location 121.446617 31.205593 3000 m WITHDIST ASC1) 1) &quot;zhangsan&quot;   2) &quot;0.1396&quot;2) 1) &quot;lisi&quot;   2) &quot;82.5066&quot;3) 1) &quot;wangwu&quot;   2) &quot;302.6202&quot;4) 1) &quot;zhangliu&quot;   2) &quot;573.0651&quot;  <span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">以121.446617 31.205593(张三位置)为圆心，3000m为半径，查询返回用户及其GeoHash值</span>127.0.0.1:0&gt;GEORADIUS user:location 121.446617 31.205593 3000 m WITHHASH1) 1) &quot;wangwu&quot;   2) &quot;4054756135204337&quot;2) 1) &quot;lisi&quot;   2) &quot;4054756138536712&quot;3) 1) &quot;zhangsan&quot;   2) &quot;4054756138736536&quot;4) 1) &quot;zhangliu&quot;   2) &quot;4054756186304127&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">以121.446617 31.205593(张三位置)为圆心，3000m为半径，查询返回用户及其GeoHash值去2个</span>127.0.0.1:0&gt;GEORADIUS user:location 121.446617 31.205593 3000 m WITHHASH COUNT 21) 1) &quot;zhangsan&quot;   2) &quot;4054756138736536&quot;2) 1) &quot;lisi&quot;   2) &quot;4054756138536712&quot;</code></pre></div><h3 id="GEORADIUSBYMEMBER"><a href="#GEORADIUSBYMEMBER" class="headerlink" title="GEORADIUSBYMEMBER"></a>GEORADIUSBYMEMBER</h3><p>GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]，这个命令和 GEORADIUS 命令一样， 都可以找出位于指定范围内的元素， 但是 GEORADIUSBYMEMBER 的中心点是由给定的位置元素决定的， 而不是像 GEORADIUS 那样， 使用输入的经度和纬度来决定中心点</p><p>指定成员的位置被用作查询的中心。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用<code>GEOADD</code>添加地理位置信息时，用标准格式的参数x,y,所以经度必须在纬度之前。这些坐标的限制是可以被编入索引的，区域面积可以很接近极点但是不能索引。具体的限制，由EPSG:900913 / EPSG:3785 / OSGEO:41001 规定如下：</p><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><p>当坐标位置超出上述指定范围时，该命令将会返回一个错误。</p><h4 id="它是如何工作的？"><a href="#它是如何工作的？" class="headerlink" title="它是如何工作的？"></a>它是如何工作的？</h4><p>sorted set使用一种称为Geohash的技术进行填充。经度和纬度的位是交错的，以形成一个独特的52位整数. 我们知道，一个sorted set 的double score可以代表一个52位的整数，而不会失去精度。</p><p>这种格式允许半径查询检查的1 + 8个领域需要覆盖整个半径，并丢弃元素以外的半径。通过计算该区域的范围，通过计算所涵盖的范围，从不太重要的部分的排序集的得分，并计算得分范围为每个区域的sorted set中的查询。</p><h4 id="使用什么样的地球模型（Earth-model）？"><a href="#使用什么样的地球模型（Earth-model）？" class="headerlink" title="使用什么样的地球模型（Earth model）？"></a>使用什么样的地球模型（Earth model）？</h4><p>这只是假设地球是一个球体，因为使用的距离公式是Haversine公式。这个公式仅适用于地球，而不是一个完美的球体。当在社交网站和其他大多数需要查询半径的应用中使用时，这些偏差都不算问题。但是，在最坏的情况下的偏差可能是0.5%，所以一些地理位置很关键的应用还是需要谨慎考虑。</p><h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><div class="code-wrapper"><pre><code class="hljs java">  <span class="hljs-comment">/**</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> userId 当前登录用户</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> lon    经度</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> lat    维度</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserLocation</span><span class="hljs-params">(Integer userId, Float lon, Float lat)</span> &#123;       <span class="hljs-comment">// 参数校验</span>       Assert.isFalse(lon == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;获取精度失败&quot;</span>);       Assert.isFalse(lat == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;获取维度失败&quot;</span>);       <span class="hljs-comment">// 获取 key user:location</span>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_LOCATION_KEY;       RedisGeoCommands.<span class="hljs-type">GeoLocation</span> <span class="hljs-variable">geoLocation</span> <span class="hljs-operator">=</span>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisGeoCommands</span>.GeoLocation(userId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(lon, lat));       redisTemplate.opsForGeo().add(key, geoLocation);   &#125;<span class="hljs-comment">/**</span><span class="hljs-comment">    * 获取附近的人</span><span class="hljs-comment">    * 获取登录用户id</span><span class="hljs-comment">    * 获取查询半径，以米为单位，默认1000m</span><span class="hljs-comment">    * 获取用户的经纬度，如果客户端没上传经纬度，那么从Redis中读取经纬度</span><span class="hljs-comment">    * 格式化查询的半径，使用RedisTemplate的Distance对象</span><span class="hljs-comment">    * 查询限制条件：限制20，返回包含距离，按由近及远排序</span><span class="hljs-comment">    * 格式化结果，将其封装到Map中，Key为userId，Value构建返回的VO，同时格式化distance属性，方便客户端展示</span><span class="hljs-comment">    * 查询附近的人的信息，并添加到对应的VO中</span><span class="hljs-comment">    * 返回结果</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> userId 登录</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> radius 半径(m)，默认1000m</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> lon    经度</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> lat    纬度</span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> List&lt;NearMeUserVO&gt; <span class="hljs-title function_">findNearMe</span><span class="hljs-params">(Integer userId, Integer radius, Float lon, Float lat)</span> &#123;       <span class="hljs-comment">// 查询半径，默认 1000m</span>       <span class="hljs-keyword">if</span> (radius == <span class="hljs-literal">null</span>) &#123;           radius = <span class="hljs-number">1000</span>;       &#125;       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_LOCATION_KEY;       <span class="hljs-comment">// 获取用户经纬度</span>       <span class="hljs-type">Point</span> <span class="hljs-variable">point</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;       <span class="hljs-keyword">if</span> (lon == <span class="hljs-literal">null</span> || lat == <span class="hljs-literal">null</span>) &#123;           <span class="hljs-comment">// 如果经纬度没传，那么从 Redis 中获取，但客户端传入会比较精确</span>           List&lt;Point&gt; points = redisTemplate.opsForGeo().position(key, userId);           Assert.isFalse(points == <span class="hljs-literal">null</span> || points.isEmpty(), <span class="hljs-string">&quot;获取经纬度失败！&quot;</span>);           point = points.get(<span class="hljs-number">0</span>);       &#125; <span class="hljs-keyword">else</span> &#123;           point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(lon, lat);       &#125;       <span class="hljs-comment">// 初始化距离对象，单位 m</span>       <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(radius, RedisGeoCommands.DistanceUnit.METERS);       <span class="hljs-comment">// 初始化 Geo 命令参数对象</span>       RedisGeoCommands.<span class="hljs-type">GeoRadiusCommandArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs();       <span class="hljs-comment">// 附近的人限制 20，包含距离，按由近及远排序</span>       args.limit(<span class="hljs-number">20</span>).includeDistance().sortAscending();       <span class="hljs-comment">// 以用户经纬度为圆心，范围 1000m</span>       <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(point, distance);       <span class="hljs-comment">// 获取附近的人 GeoLocation 信息</span>       GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Integer&gt;&gt; results = redisTemplate.opsForGeo().radius(key, circle, args);       List&lt;NearMeUserVO&gt; list = Lists.newArrayList();       <span class="hljs-comment">// 循环处理距离信息</span>       results.forEach(result -&gt; &#123;           <span class="hljs-comment">// 获取 locationName 也就是userId ID</span>           RedisGeoCommands.GeoLocation&lt;Integer&gt; location = result.getContent();           <span class="hljs-type">NearMeUserVO</span> <span class="hljs-variable">nearMeDinerVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NearMeUserVO</span>();           nearMeDinerVO.setUserId(location.getName());           <span class="hljs-comment">// 格式化距离</span>           <span class="hljs-type">Double</span> <span class="hljs-variable">dist</span> <span class="hljs-operator">=</span> result.getDistance().getValue();           <span class="hljs-comment">// 四舍五入精确到小数点 1 位，为了方便客户端显示</span>           <span class="hljs-comment">// 这里后期需要扩展处理，根据距离显示 m km</span>           <span class="hljs-type">String</span> <span class="hljs-variable">distanceStr</span> <span class="hljs-operator">=</span> NumberUtil.round(dist, <span class="hljs-number">1</span>).toString() + <span class="hljs-string">&quot;m&quot;</span>;           nearMeDinerVO.setDistance(distanceStr);           list.add(nearMeDinerVO);       &#125;);       <span class="hljs-keyword">return</span> list;   &#125;   <span class="hljs-comment">/**</span><span class="hljs-comment">    * 计算两点之间的距离</span><span class="hljs-comment">    * GEODIST key l1 l2 [m|km|ft|mi]</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">distance</span><span class="hljs-params">(Integer userId, Integer toUserId)</span> &#123;       Assert.isFalse(userId == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;获取用户失败！&quot;</span>);       Assert.isFalse(toUserId == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;获取对象失败！&quot;</span>);       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_LOCATION_KEY;       <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> redisTemplate.opsForGeo().distance(key, userId, toUserId, Metrics.MILES);       <span class="hljs-keyword">return</span>  NumberUtil.round(distance.getValue(), <span class="hljs-number">1</span>).toString() + <span class="hljs-string">&quot;m&quot;</span>;   &#125;</code></pre></div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-用户积分</title>
    <link href="/2022/04/14/Redis%E5%BA%94%E7%94%A8-%E7%94%A8%E6%88%B7%E7%A7%AF%E5%88%86/"/>
    <url>/2022/04/14/Redis%E5%BA%94%E7%94%A8-%E7%94%A8%E6%88%B7%E7%A7%AF%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="用户积分"><a href="#用户积分" class="headerlink" title="用户积分"></a>用户积分</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>添加积分：在上述签到的基础上添加用户积分（签到1天送10积分，连续签到2天送20积分，3天送30积分，4天以上均送50积分）</li><li>积分排行榜设计</li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="数据库解决"><a href="#数据库解决" class="headerlink" title="数据库解决"></a>数据库解决</h3><p>最简单的设计思路就是利用关系型数据库保存积分记录数据，然后进行统计，如下：</p><h4 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user_points` (  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,  `fk_user_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  `points` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  `types` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;积分类型：0=签到，1=关注好友，2=添加评论，3=点赞商户&#x27;</span>,  `is_valid` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  `create_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  `update_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">60375</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;</code></pre></div><h3 id="排行榜-编写sql解决"><a href="#排行榜-编写sql解决" class="headerlink" title="排行榜 编写sql解决"></a>排行榜 编写sql解决</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- msqyl 8.0之前的版本</span><span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span>,<span class="hljs-variable">@rank</span>:<span class="hljs-operator">=</span> <span class="hljs-variable">@rank</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> ranks <span class="hljs-keyword">FROM</span> ( <span class="hljs-keyword">SELECT</span> fk_user_id <span class="hljs-keyword">as</span> id,<span class="hljs-built_in">sum</span>(points) <span class="hljs-keyword">as</span> total <span class="hljs-keyword">FROM</span> t_user_points,(<span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@rank</span>:<span class="hljs-operator">=</span><span class="hljs-number">0</span> ) r <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> fk_user_id <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> total <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">5</span> ) <span class="hljs-keyword">as</span> t1; <span class="hljs-comment">-- mysql8.0</span> <span class="hljs-keyword">SELECT</span> t1.fk_user_id <span class="hljs-keyword">AS</span> id, <span class="hljs-built_in">sum</span>( t1.points ) <span class="hljs-keyword">AS</span> total, <span class="hljs-built_in">rank</span> () <span class="hljs-keyword">over</span> ( <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">sum</span>( t1.points ) <span class="hljs-keyword">DESC</span> ) <span class="hljs-keyword">AS</span> ranks <span class="hljs-keyword">FROM</span> t_user_points t1 <span class="hljs-keyword">WHERE</span> t1.is_valid <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> t1.fk_user_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> total <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">5</span>;</code></pre></div><h3 id="操作数据库问题"><a href="#操作数据库问题" class="headerlink" title="操作数据库问题"></a>操作数据库问题</h3><p>因为t_user_points本质上是一张日志表，记录了所有用户的积分记录，因此直接去数据库统计的话会有如下问题：</p><ul><li>SQL编写复杂</li><li>数据量大，执行统计SQL慢</li><li>高并发下会拖累其他业务表的操作，导致系统变慢</li></ul><h4 id="使用-Sorted-Set优化性能"><a href="#使用-Sorted-Set优化性能" class="headerlink" title="使用 Sorted Set优化性能"></a>使用 Sorted Set优化性能</h4><p>使用Sorted Set保存用户的积分总数，因为Sorted Set有score属性，能够方便保存与读取，使用指令：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加元素的分数，如果member不存在就会自动创建</span>ZINCRBY key increment member <span class="hljs-meta prompt_"># </span><span class="language-bash">给<span class="hljs-built_in">id</span>为1的用户加10分</span>ZINCRBY key 10 1<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">按分数递增排列</span>ZRANGE  key 0 -1 WITHSCORES<span class="hljs-meta prompt_"># </span><span class="language-bash">按分数递减排列</span>ZREVRANGE key 0 -1 WITHSCORES<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">根据分数从大到小获取<span class="hljs-built_in">id</span>为1的用户排名</span>zrevrank key 1</code></pre></div><h3 id="使用Sorted-Set优势"><a href="#使用Sorted-Set优势" class="headerlink" title="使用Sorted Set优势"></a>使用Sorted Set优势</h3><ul><li>Redis基于内存，读取性能高</li><li>Sorted Set底层是SkipList + ZipList既能保证有序又能对数据进行压缩存储</li><li>Sorted Set操作简单，几个命令搞定</li></ul><h3 id="部分代码实现"><a href="#部分代码实现" class="headerlink" title="部分代码实现"></a>部分代码实现</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 添加积分</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@Override</span>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">add</span><span class="hljs-params">(Integer userId, Integer points, Integer types)</span> &#123;      <span class="hljs-comment">// 插入数据库</span>      <span class="hljs-type">UserPoints</span> <span class="hljs-variable">userPoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserPoints</span>();      userPoints.setFkUserId(userId);      userPoints.setPoints(points);      userPoints.setTypes(types);      <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> baseMapper.add(userPoints);      <span class="hljs-comment">// 将积分保存到 Redis 的 Sorted Sets 中</span>      redisTemplate.opsForZSet().incrementScore(              Constant.REDIS_POINTS_KEY, userId, points);      <span class="hljs-keyword">return</span> result;  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 添加用户积分 给签到服务使用</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@Override</span>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">addPoints</span><span class="hljs-params">(<span class="hljs-type">int</span> count, Integer userId)</span> &#123;      <span class="hljs-comment">// 签到1天送10积分，连续签到2天送20积分，3天送30积分，4天以上均送50积分</span>      <span class="hljs-type">int</span> <span class="hljs-variable">points</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;      <span class="hljs-keyword">if</span> (count == <span class="hljs-number">2</span>) &#123;          points = <span class="hljs-number">20</span>;      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>) &#123;          points = <span class="hljs-number">30</span>;      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">4</span>) &#123;          points = <span class="hljs-number">50</span>;      &#125;      <span class="hljs-keyword">return</span> add(userId, points, PointTypesConstant.sign.getType());  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 查询排行榜，并显示个人排名 -- Mysql</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@Override</span>  <span class="hljs-keyword">public</span> List&lt;PointsRankVO&gt; <span class="hljs-title function_">findTopN</span><span class="hljs-params">(Integer userId, Integer top)</span> &#123;      List&lt;PointsRankVO&gt; topN = baseMapper.findTopN(top);      <span class="hljs-keyword">if</span> (topN == <span class="hljs-literal">null</span> || topN.isEmpty()) &#123;          <span class="hljs-keyword">return</span> Lists.newArrayList();      &#125;      topN.forEach(e -&gt; e.setIsMe(e.getId().equals(userId)));      <span class="hljs-keyword">if</span> (!isUserExist(topN, userId)) &#123;          <span class="hljs-comment">// 如果不在 ranks 中，获取个人排名追加在最后</span>          <span class="hljs-type">PointsRankVO</span> <span class="hljs-variable">userRank</span> <span class="hljs-operator">=</span> baseMapper.findUserRank(userId);          userRank.setIsMe(<span class="hljs-literal">true</span>);          topN.add(userRank);      &#125;      <span class="hljs-keyword">return</span> topN;  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 查询排行榜，并显示个人排名 -- Redis</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@Override</span>  <span class="hljs-keyword">public</span> List&lt;PointsRankVO&gt; <span class="hljs-title function_">findTopNFromRedis</span><span class="hljs-params">(Integer userId, Integer top)</span> &#123;      <span class="hljs-comment">// 统计积分排行榜</span>      Set&lt;ZSetOperations.TypedTuple&lt;Integer&gt;&gt; rangeWithScores = redisTemplate.opsForZSet().reverseRangeWithScores(              Constant.REDIS_POINTS_KEY, <span class="hljs-number">0</span>, top - <span class="hljs-number">1</span>);      <span class="hljs-keyword">if</span> (rangeWithScores == <span class="hljs-literal">null</span> || rangeWithScores.isEmpty()) &#123;          <span class="hljs-keyword">return</span> Lists.newArrayList();      &#125;      <span class="hljs-comment">// 初始化排名</span>      <span class="hljs-type">int</span> <span class="hljs-variable">rank</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;      <span class="hljs-comment">// 初始化用户ID 集合</span>      List&lt;PointsRankVO&gt; topN = Lists.newArrayList();      <span class="hljs-comment">// 根据 key： 用户ID  value：积分信息 构建一个 Map</span>      Map&lt;Integer, PointsRankVO&gt; ranksMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;(top);      <span class="hljs-comment">// 循环处理排行榜，添加排名信息</span>      <span class="hljs-keyword">for</span> (ZSetOperations.TypedTuple&lt;Integer&gt; rangeWithScore : rangeWithScores) &#123;          <span class="hljs-comment">// 食客ID</span>          <span class="hljs-type">Integer</span> <span class="hljs-variable">currentUserId</span> <span class="hljs-operator">=</span> rangeWithScore.getValue();          <span class="hljs-comment">// 积分</span>          <span class="hljs-type">int</span> <span class="hljs-variable">points</span> <span class="hljs-operator">=</span> rangeWithScore.getScore().intValue();          <span class="hljs-comment">// 将食客 ID 添加至食客 ID 集合</span>          <span class="hljs-type">PointsRankVO</span> <span class="hljs-variable">userPointsRankVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PointsRankVO</span>();          userPointsRankVO.setId(currentUserId);          userPointsRankVO.setRanks(rank);          userPointsRankVO.setTotal(points);          userPointsRankVO.setIsMe(<span class="hljs-literal">false</span>);          topN.add(userPointsRankVO);          ranksMap.put(currentUserId, userPointsRankVO);          <span class="hljs-comment">// 排名 +1</span>          rank++;      &#125;      <span class="hljs-comment">// 包含</span>      <span class="hljs-keyword">if</span> (isUserExist(topN, userId)) &#123;          <span class="hljs-type">PointsRankVO</span> <span class="hljs-variable">pointsRankVO</span> <span class="hljs-operator">=</span> ranksMap.get(userId);          pointsRankVO.setIsMe(<span class="hljs-literal">true</span>);          <span class="hljs-keyword">return</span> Lists.newArrayList(ranksMap.values());      &#125;      <span class="hljs-comment">// 如果不在 ranks 中，获取个人排名追加在最后</span>      <span class="hljs-keyword">else</span> &#123;          <span class="hljs-type">Long</span> <span class="hljs-variable">myRank</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet().reverseRank(                  Constant.REDIS_POINTS_KEY, userId);          <span class="hljs-keyword">if</span> (myRank != <span class="hljs-literal">null</span>) &#123;              <span class="hljs-type">PointsRankVO</span> <span class="hljs-variable">userRank</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PointsRankVO</span>();              userRank.setId(userId);              userRank.setRanks(myRank.intValue() + <span class="hljs-number">1</span>);              <span class="hljs-comment">// 获取积分</span>              <span class="hljs-type">Double</span> <span class="hljs-variable">points</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet().score(Constant.REDIS_POINTS_KEY,                      userId);              userRank.setTotal(points.intValue());              userRank.setIsMe(<span class="hljs-literal">true</span>);              topN.add(userRank);          &#125;      &#125;      <span class="hljs-keyword">return</span> topN;  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 判断用户是否在排行榜中</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUserExist</span><span class="hljs-params">(List&lt;PointsRankVO&gt; pointsRankList, Integer userId)</span> &#123;      List&lt;Integer&gt; collect = pointsRankList.stream().map(PointsRankVO::getId).collect(Collectors.toList());      <span class="hljs-keyword">return</span> collect.contains(userId);  &#125;</code></pre></div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-用户签到</title>
    <link href="/2022/04/13/Redis%E5%BA%94%E7%94%A8-%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0/"/>
    <url>/2022/04/13/Redis%E5%BA%94%E7%94%A8-%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在很多互联网应用中，我们会存在签到送积分、签到领取奖励等这样的需求，比如：</p><ul><li>签到1天送10积分，连续签到2天送20积分，3天送30积分，4天以上均送50积分等。</li><li>如果连续签到中断，则重置计数，每月初重置计数。</li><li>显示用户某个月的签到次数。</li><li>在日历控件上展示用户每月签到情况，可以切换年月显示。</li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="数据库解决"><a href="#数据库解决" class="headerlink" title="数据库解决"></a>数据库解决</h3><p>最简单的设计思路就是利用关系型数据库保存签到数据（t_user_sign），如下：</p><table><thead><tr><th align="left">字段名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">数据表主键（AUTO_INCREMENT）</td></tr><tr><td align="left">fk_user_id</td><td align="left">用户ID</td></tr><tr><td align="left">sign_date</td><td align="left">签到日期（如2022-01-01）</td></tr><tr><td align="left">amount</td><td align="left">连续签到天数（如2）</td></tr></tbody></table><ul><li>用户签到：往此表插入一条数据，并更新连续签到天数；</li><li>查询根据签到日期查询</li><li>统计根据amount统计</li></ul><p>如果这样存数据的话，对于用户量比较大的应用，数据库可能就扛不住，比如1000W用户，一天一条，那么一个月就是3亿数据，这是非常庞大的。</p><h3 id="使用Redis的Bitmaps完成"><a href="#使用Redis的Bitmaps完成" class="headerlink" title="使用Redis的Bitmaps完成"></a>使用Redis的Bitmaps完成</h3><p>Bitmaps叫位图，它不是Redis的基本数据类型（比如Strings、Lists、Sets、Hashes这类实际的数据类型），而是基于String数据类型的按位操作，高阶数据类型的一种。Bitmaps支持的最大位数是2^32位。使用512M内存就可以存储多达42.9亿的字节信息（2^32 = 4,294,967,296）</p><p>它是由一组bit位组成的，每个bit位对应0和1两个状态，虽然内部还是采用String类型存储，但Redis提供了一些指令用于直接操作位图，可以把它看作是一个bit数组，数组的下标就是偏移量。它的优点是内存开销小、效率高且操作简单，很适合用于签到这类场景。比如按月进行存储，一个月最多31天，那么我们将该月用户的签到缓存二进制就是00000000000000000000000000000000，当某天签到将0改成1即可，而且Redis提供对bitmap的很多操作比如存储、获取、统计等指令，使用起来非常方便。</p><h2 id="BitMaps常用指令"><a href="#BitMaps常用指令" class="headerlink" title="BitMaps常用指令"></a>BitMaps常用指令</h2><p class="note note-success">负数偏移量表示倒数第几  简写@LBN（last but number）</p><table><thead><tr><th align="left">命令</th><th align="left">功能</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">SETBIT</td><td align="left">指定偏移量bit位置设置值</td><td align="left">key offset value【0=&lt; offset&lt; 2^32】</td></tr><tr><td align="left">GETBIT</td><td align="left">查询指定偏移位置的bit值</td><td align="left">key offset</td></tr><tr><td align="left">BITCOUNT</td><td align="left">统计指定字节区间bit为1的数量</td><td align="left">key [start end]【@LBN】</td></tr><tr><td align="left">BITFIELD</td><td align="left">操作多字节位域</td><td align="left">key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP/SAT/FAIL]</td></tr><tr><td align="left">BITPOS</td><td align="left">查询指定字节区间第一个被设置成1的bit位的位置</td><td align="left">key bit [start] [end]【@LBN】</td></tr></tbody></table><p>考虑到每月初需要重置连续签到次数，最简单的方式是按用户每月存一条签到数据（也可以每年存一条数据）。Key的格式为<code>user:sign:userid:yyyyMM</code>，Value则采用长度为4个字节（32位）的位图（最大月份只有31天）。位图的每一位代表一天的签到，1表示已签，0表示未签。<strong>从高位插入，也就是说左边位算是开始日期。</strong></p><p>例如<code>user:sign:1:202204</code>表示用户id=1的用户在2022年4月的签到记录。那么</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 2022年4月1号签到</span>127.0.0.1:0&gt;SETBIT user:sign:1:202204 0 1<span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment"># 2022年4月2号签到</span>127.0.0.1:0&gt;SETBIT user:sign:1:202204 1 1<span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment"># 2022年4月3号签到</span>127.0.0.1:0&gt;SETBIT user:sign:1:202204 2 1<span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment"># 2022年4月4号签到</span>127.0.0.1:0&gt;SETBIT user:sign:1:202204 3 1<span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment"># 获取2022年4月4号签到情况</span>127.0.0.1:0&gt;GETBIT user:sign:1:202204 3<span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment"># 统计2022年4月签到次数</span>127.0.0.1:0&gt;BITCOUNT user:sign:1:202204 <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment"># 获取2022年4月首次签到</span>127.0.0.1:0&gt;BITPOS user:sign:1:202204 1<span class="hljs-string">&quot;0&quot;</span><span class="hljs-comment"># 获取2022年4月前3签到情况,返回7，二进制111，意味着前三天都签到了</span>127.0.0.1:0&gt;BITFIELD user:sign:1:202204 get u3 0<span class="hljs-string">&quot;7&quot;</span></code></pre></div><h2 id="核心业务代码"><a href="#核心业务代码" class="headerlink" title="核心业务代码"></a>核心业务代码</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">  * 用户签到</span><span class="hljs-comment">  * 获取登录用户信息</span><span class="hljs-comment">  * 根据日期获取当前是多少号（使用BITSET指令关注时，offset从0开始计算，0就代表1号）</span><span class="hljs-comment">  * 构建用户按月存储key（user:sign:用户id:月份）</span><span class="hljs-comment">  * 判断用户是否签到（GETBIT指令）</span><span class="hljs-comment">  * 用户签到（SETBIT）</span><span class="hljs-comment">  * 返回用户连续签到次数（BITFIELD key GET [u/i] type offset value， 获取从用户从当前日期开始到1号的所有签到状态，然后进行位移操作，获取连续签到天数）</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> userId  登录用户</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> dateStr 查询的日期，默认当天 yyyy-MM-dd</span><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 连续签到次数</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doSign</span><span class="hljs-params">(Integer userId, String dateStr)</span> &#123;     <span class="hljs-comment">// 获取日期</span>     <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> getDate(dateStr);     <span class="hljs-comment">// 获取日期对应的天数，多少号 从 0 开始</span>     <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> DateUtil.dayOfMonth(date) - <span class="hljs-number">1</span>;     <span class="hljs-comment">// 构建 Key</span>     <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> buildSignKey(userId, date);     <span class="hljs-comment">// 查看是否已签到</span>     <span class="hljs-type">boolean</span> <span class="hljs-variable">isSigned</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().getBit(signKey, offset);     Assert.isFalse(isSigned, <span class="hljs-string">&quot;当前日期已完成签到，无需再签&quot;</span>);     <span class="hljs-comment">// 签到</span>     redisTemplate.opsForValue().setBit(signKey, offset, <span class="hljs-literal">true</span>);     <span class="hljs-comment">// 统计连续签到次数</span>     <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> getContinuousSignCount(userId, date);     <span class="hljs-keyword">return</span> count; &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 统计某月连续签到次数</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> userId 用户ID</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> date   日期</span><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 当月连续签到次数</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getContinuousSignCount</span><span class="hljs-params">(Integer userId, Date date)</span> &#123;     <span class="hljs-comment">// 获取日期对应的天数，多少号</span>     <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> DateUtil.dayOfMonth(date);     <span class="hljs-comment">// 构建 Key</span>     <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> buildSignKey(userId, date);     <span class="hljs-comment">// 命令：bitfield key get [u/i]offset value</span>     <span class="hljs-comment">// 此命令就是get取出key对应的位图，指定value索引位开始，取offset位偏移量的二进制</span>     <span class="hljs-type">BitFieldSubCommands</span> <span class="hljs-variable">bitFieldSubCommands</span> <span class="hljs-operator">=</span> BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">0</span>);     List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(signKey, bitFieldSubCommands);     <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     &#125;     <span class="hljs-type">int</span> <span class="hljs-variable">signCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;     <span class="hljs-type">long</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>) == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : list.get(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 取低位连续不为0的个数即为连续签到次数，需考虑当天尚未签到的情况</span>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dayOfMonth; i &gt; <span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">// i 表示位移次数</span>         <span class="hljs-comment">// 右移再左移，如果等于自己说明最低位是 0，表示未签到</span>         <span class="hljs-keyword">if</span> (v &gt;&gt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span> == v) &#123;             <span class="hljs-comment">// 低位为 0 且非当天说明连续签到中断了</span>             <span class="hljs-keyword">if</span> (i != dayOfMonth) &#123;                 <span class="hljs-keyword">break</span>;             &#125;         &#125; <span class="hljs-keyword">else</span> &#123;             <span class="hljs-comment">// 签到了 签到数加1</span>             signCount += <span class="hljs-number">1</span>;         &#125;         <span class="hljs-comment">// 右移一位并重新赋值，相当于把最右边一位去除</span>         v &gt;&gt;= <span class="hljs-number">1</span>;     &#125;     <span class="hljs-keyword">return</span> signCount; &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取用户签到次数</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> userId  登录token</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> dateStr 查询的日期，默认当月 yyyy-MM-dd</span><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 当前的签到次数</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getSignCount</span><span class="hljs-params">(Integer userId, String dateStr)</span> &#123;     <span class="hljs-comment">// 获取日期</span>     <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> getDate(dateStr);     <span class="hljs-comment">// 构建 Key</span>     <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> buildSignKey(userId, date);     <span class="hljs-comment">// e.g. BITCOUNT user:sign:5:202011</span>     <span class="hljs-keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(signKey.getBytes())); &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取当月签到情况</span><span class="hljs-comment">  * 获取登录用户信息</span><span class="hljs-comment">  * 构建Redis保存的Key</span><span class="hljs-comment">  * 获取月份的总天数（考虑2月闰、平年）</span><span class="hljs-comment">  * 通过BITFIELD指令获取当前月的所有签到数据</span><span class="hljs-comment">  * 遍历进行判断是否签到，并存入TreeMap方便排序</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> userId  登录token</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> dateStr 查询的日期，默认当月 yyyy-MM-dd</span><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> Key为签到日期，Value为签到状态的Map</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> Map&lt;String, Boolean&gt; <span class="hljs-title function_">getSignInfo</span><span class="hljs-params">(Integer userId, String dateStr)</span> &#123;     <span class="hljs-comment">// 获取日期</span>     <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> getDate(dateStr);     <span class="hljs-comment">// 构建 Key</span>     <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> buildSignKey(userId, date);     <span class="hljs-comment">// 构建一个自动排序的 Map</span>     Map&lt;String, Boolean&gt; signInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();     <span class="hljs-comment">// 获取某月的总天数（考虑闰年）</span>     <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> DateUtil.lengthOfMonth(DateUtil.month(date) + <span class="hljs-number">1</span>, DateUtil.isLeapYear(DateUtil.dayOfYear(date)));     <span class="hljs-comment">// 命令：bitfield key get [u/i]offset value</span>     <span class="hljs-comment">// 此命令就是get取出key对应的位图，指定value索引位开始，取offset位偏移量的二进制</span>     <span class="hljs-comment">// 获取某月最后一天的数值（取无符号整数）</span>     <span class="hljs-type">BitFieldSubCommands</span> <span class="hljs-variable">bitFieldSubCommands</span> <span class="hljs-operator">=</span> BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">0</span>);     List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(signKey, bitFieldSubCommands);     <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;         <span class="hljs-keyword">return</span> signInfo;     &#125;     <span class="hljs-type">long</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>) == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : list.get(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 由低位到高位进行遍历，为 0 表示未签，为 1 表示已签</span>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dayOfMonth; i &gt; <span class="hljs-number">0</span>; i--) &#123;         <span class="hljs-comment">// 获取日期时间，比如 i = 31，最终拿到 yyyyMM31</span>         <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> LocalDateTimeUtil.of(date).withDayOfMonth(i);         <span class="hljs-comment">// 先右移一位再左移一位，如果还不变那只能证明低位是 0，否则低位就是 1</span>         <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> v &gt;&gt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span> != v;         <span class="hljs-comment">// 构建一个 Key 为日期，value 为是否签到标记的有序 Map</span>         signInfo.put(DateUtil.format(dateTime, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>), flag);         <span class="hljs-comment">// 右移一位并重新赋值，相当于把最右边一位去除</span>         v &gt;&gt;= <span class="hljs-number">1</span>;     &#125;     <span class="hljs-keyword">return</span> signInfo; &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取首次签到日期</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> userId</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> dateStr 查询的日期，默认当月 yyyy-MM-dd</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">getFirstTimeSignInfo</span><span class="hljs-params">(Integer userId, String dateStr)</span> &#123;     <span class="hljs-comment">// 获取日期</span>     <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> getDate(dateStr);     <span class="hljs-comment">// 构建 Key</span>     <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> buildSignKey(userId, date);     Map&lt;String, Boolean&gt; info = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();     List&lt;String&gt; keys = Arrays.asList(signKey);     DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;(<span class="hljs-string">&quot;local result = tonumber(redis.call(&#x27;BITPOS&#x27;, KEYS[1], 1));\n&quot;</span> + <span class="hljs-string">&quot;if (result &gt; -1) then\n&quot;</span> + <span class="hljs-string">&quot;    return result;\n&quot;</span> + <span class="hljs-string">&quot;end;\n&quot;</span> + <span class="hljs-string">&quot;return -1;\n&quot;</span>);     redisScript.setResultType(Long.class);     <span class="hljs-type">Long</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> (Long) redisTemplate.execute(redisScript, keys) + <span class="hljs-number">1</span>;     <span class="hljs-keyword">if</span> (execute != -<span class="hljs-number">1</span>) &#123;         <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> LocalDateTimeUtil.of(date).withDayOfMonth(Math.toIntExact(execute));         <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> DateUtil.format(dateTime, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);         <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;data&quot;</span>, format);     &#125; <span class="hljs-keyword">else</span> &#123;         <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;无数据&quot;</span>);     &#125; &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取指定日期签到用户 默认今天</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">getTodaySignUser</span><span class="hljs-params">(String dateStr)</span>&#123;     Set&lt;String&gt; keys = redisTemplate.keys(<span class="hljs-string">&quot;user:sign&quot;</span>.concat(<span class="hljs-string">&quot;*&quot;</span>));     List&lt;Integer&gt; userIds = Lists. newArrayList();     <span class="hljs-keyword">if</span> (CollUtil.isEmpty(keys))&#123;         <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());     &#125;     <span class="hljs-keyword">for</span> (String key : keys) &#123;         <span class="hljs-comment">// 获取日期</span>         <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> getDate(dateStr);         <span class="hljs-comment">// 获取日期对应的天数，多少号 从 0 开始</span>         <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> DateUtil.dayOfMonth(date) - <span class="hljs-number">1</span>;         <span class="hljs-keyword">if</span> (redisTemplate.opsForValue().getBit(key, offset))&#123;             <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ReUtil.extractMulti(<span class="hljs-string">&quot;.*(\\d+):(\\d+)&quot;</span>, key, <span class="hljs-string">&quot;$1&quot;</span>);             userIds.add(Integer.valueOf(result));         &#125;     &#125;     <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;data&quot;</span>, userIds); &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取日期</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> dateStr yyyy-MM-dd 默认当天</span><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">  */</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">getDate</span><span class="hljs-params">(String dateStr)</span> &#123;     <span class="hljs-keyword">if</span> (StrUtil.isBlank(dateStr)) &#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();     &#125;     <span class="hljs-keyword">try</span> &#123;         <span class="hljs-keyword">return</span> DateUtil.parse(dateStr);     &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;请传入yyyy-MM-dd的日期格式&quot;</span>);     &#125; &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 考虑到每月初需要重置连续签到次数，最简单的方式是按用户每月存一条签到数据（也可以每年存一条数据）。</span><span class="hljs-comment">  * Key的格式为user:sign:uid:yyyyMM，Value则采用长度为4个字节（32位）的位图（最大月份只有31天）。</span><span class="hljs-comment">  * 位图的每一位代表一天的签到，1表示已签，0表示未签。</span><span class="hljs-comment">  * 构建存储Key user:sign:dinerId:yyyyMM</span><span class="hljs-comment">  * e.g. user:sign:1:202204表示userId=1的食客在2022年04月的签到记录。</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> userId</span><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">  */</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">buildSignKey</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, Date date)</span> &#123;     <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;user:sign:%d:%s&quot;</span>, userId, DateUtil.format(date, <span class="hljs-string">&quot;yyyyMM&quot;</span>)); &#125;</code></pre></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Bitmaps最大长度位数是多少？</li></ul><p>由于String数据类型的最大长度是512M，所以String支持的位数是2^32位。512M表示字节Byte长度，换算成位bit需要乘以8，即512 * 2^10 * 2^10 * 8=2^32；</p><ul><li>Bitmaps可以支持超过512M的数据吗？</li></ul><p>Strings的最大长度是512M，还能存更大的数据？当然不能，但是我们可以换种实现思路，就是将大key换成小key，这样存储的大小完全不受限。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>   <strong>RedisCommandExecutionException</strong><br>       使用的Redis版本太低<br>       Redis5.x下载  <a href="https://github.com/tporadowski/redis/releases/">https://github.com/tporadowski/redis/releases/</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-Feed功能</title>
    <link href="/2022/04/12/Redis%E5%BA%94%E7%94%A8-Feed%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/04/12/Redis%E5%BA%94%E7%94%A8-Feed%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Feed功能"><a href="#Feed功能" class="headerlink" title="Feed功能"></a>Feed功能</h1><p>在互联网领域，尤其现在的移动互联网时代，Feed流产品是非常常见的，比如我们每天都会用到的朋友圈，微博，就是一种非常典型的Feed流产品，还有图片分享网站Pinterest，花瓣网等又是另一种形式的Feed流产品。除此之外，很多App的都会有一个模块，要么叫动态，要么叫消息广场，这些也是Feed流产品，可以说，Feed流产品是遍布天下所有的App中。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>我们在讲如何设计Feed流系统之前，先来看一下Feed流中的一些概念：</p><ul><li>Feed：Feed流中的每一条状态或者消息都是Feed，比如朋友圈中的一个状态就是一个Feed，微博中的一条微博就是一个Feed。</li><li>Feed流：持续更新并呈现给用户内容的信息流。每个人的朋友圈，微博关注页等等都是一个Feed流。</li><li>Timeline：Timeline其实是一种Feed流的类型，微博，朋友圈都是Timeline类型的Feed流，但是由于Timeline类型出现最早，使用最广泛，最为人熟知，有时候也用Timeline来表示Feed流。</li><li>关注页Timeline：展示其他人Feed消息的页面，比如朋友圈，微博的首页等。</li><li>个人页Timeline：展示自己发送过的Feed消息的页面，比如微信中的相册，微博的个人页等。</li></ul><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>Feed流系统有一些非常典型的特点，比如：</p><ul><li>多账号内容流：Feed流系统中肯定会存在成千上万的账号，账号之间可以关注，取关，加好友和拉黑等操作。只要满足这一条，那么就可以当做Feed流系统来设计。</li><li>非稳定的账号关系：由于存在关注，取关等操作，所以系统中的用户之间的关系就会一直在变化，是一种非稳定的状态。</li><li>读写比例100:1：读写严重不平衡，读多写少，一般读写比例在10：1，甚至100：1以上。</li><li>消息必达性要求高：比如发送了一条朋友圈后，结果部分朋友看到了，部分朋友没看到，如果偏偏女朋友没看到，那么可能会产生很严重的感情矛盾，后果很严重。</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>Feed流的分类有很多种，但最常见的分类有两种：</p><ul><li><strong>Timeline：按发布的时间顺序排序，先发布的先看到，后发布的排列在最顶端，类似于微信朋友圈，微博等。这也是一种最常见的形式。产品如果选择Timeline类型，那么就是认为<code>Feed流中的Feed不多，但是每个Feed都很重要，都需要用户看到</code>。</strong></li><li>Rank：按某个非时间的因子排序，一般是按照用户的喜好度排序，用户最喜欢的排在最前面，次喜欢的排在后面。这种一般假定用户可能看到的Feed非常多，而用户花费在这里的时间有限，那么就为用户选择出用户最想看的Top N结果，场景的应用场景有图片分享、新闻推荐类、商品推荐等。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>解决Feed流最核心的两个问题：一个是存储，另一个是推送</strong></p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>因为该项目中Feed比较简单，就类比于空间说说，因此可以使用MySQL关系型数据库存储，如果对于数据结构比较复杂的Feed流就要使用NoSQL数据库，这样存储更方便与高效，比如MongoDB或者HBase。</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>在推送方案里面的，有三种方案，分别是：</p><ul><li>拉方案：也称为<code>读扩散</code>，用户主动去拉取关注人的Feed内容</li><li><strong>推方案：也成为<code>写扩散</code>，当用户添加Feed时，会自动将Feed通知给关注的人（优选）</strong></li></ul><p><strong>使用Redis Sorted Sets（方便按时间排序Timeline）维护粉丝的Feed集合，当博主添加Feed时，主动将内容推送到粉丝的Feed集合中，这样用户可以很方便快速从集合中读取</strong></p><ul><li>推拉结合：比如微博，大部分用户的账号关系都是几百个，但是有个别用户是1000万以上才使用。</li></ul><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_feeds` (`id`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,`content`  <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span> ,`fk_user_id`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,`praise_amount`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;点赞数量&#x27;</span> ,`comment_amount`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评论数量&#x27;</span> ,`fk_restaurant_id`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,`create_date`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,`update_date`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,`is_valid`  tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,<span class="hljs-keyword">PRIMARY</span> KEY (`id`))ENGINE<span class="hljs-operator">=</span>InnoDB<span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span><span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ciAUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">14</span>ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;</code></pre></div><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 变更 Feed</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> followingUserId 关注的好友的 ID</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> userId          登录用户</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> type            1 关注 0 取关</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFollowingFeeds</span><span class="hljs-params">(Integer userId, Integer followingUserId, <span class="hljs-type">int</span> type)</span> &#123;       <span class="hljs-comment">// 请选择关注的好友</span>       Assert.isFalse(followingUserId == <span class="hljs-literal">null</span> || followingUserId &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;请选择关注的好友&quot;</span>);       <span class="hljs-comment">// 获取关注/取关所有 Feed</span>       List&lt;TFeeds&gt; followingFeeds = list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TFeeds&gt;().eq(TFeeds::getFkUserId, followingUserId));       <span class="hljs-keyword">if</span> (followingFeeds == <span class="hljs-literal">null</span> || followingFeeds.isEmpty()) &#123;           <span class="hljs-keyword">return</span>;       &#125;       <span class="hljs-comment">// 我关注的 FeedsKey</span>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_FOLLOWING_FEEDS_KEY + userId;       <span class="hljs-comment">// 取关</span>       <span class="hljs-keyword">if</span> (type == <span class="hljs-number">0</span>) &#123;           List&lt;Integer&gt; feedIds = followingFeeds.stream().map(BaseEntity::getId).collect(Collectors.toList());           redisTemplate.opsForZSet().remove(key, feedIds.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;&#125;));           <span class="hljs-comment">// 关注</span>       &#125; <span class="hljs-keyword">else</span> &#123;           Set&lt;ZSetOperations.TypedTuple&gt; typedTuples = followingFeeds.stream().map(feed -&gt; &#123;               <span class="hljs-keyword">if</span> (feed.getCreateDate() == <span class="hljs-literal">null</span>) &#123;                   feed.setCreateDate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());               &#125;               <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTypedTuple</span>&lt;&gt;(feed.getId(), (<span class="hljs-type">double</span>) feed.getCreateDate().getTime());           &#125;).collect(Collectors.toSet());           redisTemplate.opsForZSet().add(key, typedTuples);       &#125;   &#125;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id, Integer userId)</span> &#123;       <span class="hljs-comment">// 请选择要删除的 Feed</span>       Assert.isFalse(id == <span class="hljs-literal">null</span> || id &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;请选择要删除的Feed&quot;</span>);       <span class="hljs-comment">// 获取登录用户</span>       <span class="hljs-comment">// 获取 Feed 内容</span>       <span class="hljs-type">TFeeds</span> <span class="hljs-variable">feeds</span> <span class="hljs-operator">=</span> getById(id);       <span class="hljs-comment">// 判断 Feed 是否已被删除且只能删除自己的 Feed</span>       Assert.isFalse(feeds == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;该Feed已被删除&quot;</span>);       Assert.isFalse(feeds.getFkUserId().equals(userId), <span class="hljs-string">&quot;只能删除自己的Feed&quot;</span>);       <span class="hljs-comment">// 删除</span>       <span class="hljs-keyword">if</span> (removeById(id)) &#123;           <span class="hljs-comment">// 将内容从粉丝的集合中删除  -- 异步消息队列优化</span>           Set&lt;Integer&gt; followersIds = tFollowService.findFollowers(userId);           followersIds.forEach(follower -&gt; &#123;               <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Constant.REDIS_FOLLOWING_FEEDS_KEY.concat(follower + <span class="hljs-string">&quot;&quot;</span>);               redisTemplate.opsForZSet().remove(key, feeds.getId());           &#125;);           <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;删除成功&quot;</span>);       &#125;<span class="hljs-keyword">else</span> &#123;           <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;500&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;删除失败&quot;</span>);       &#125;   &#125;   <span class="hljs-comment">/**</span><span class="hljs-comment">    * 根据时间由近到远，每次查询 10 条 Feed</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> page 页码</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Page&lt;TFeeds&gt; <span class="hljs-title function_">selectForPage</span><span class="hljs-params">(Integer page, Integer pageSize, Integer userId)</span> &#123;       <span class="hljs-keyword">if</span> (page == <span class="hljs-literal">null</span>) &#123;           page = <span class="hljs-number">1</span>;       &#125;       <span class="hljs-keyword">if</span> (pageSize == <span class="hljs-literal">null</span>) &#123;           pageSize = <span class="hljs-number">10</span>;       &#125;       <span class="hljs-comment">// 我关注的好友的 FeedsKey</span>       <span class="hljs-type">String</span> <span class="hljs-variable">redisFeedKey</span> <span class="hljs-operator">=</span> Constant.REDIS_FOLLOWING_FEEDS_KEY + userId;       <span class="hljs-comment">// SortedSet 的 ZREVRANGE 命令是闭区间(左闭右闭)</span>       <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (page - <span class="hljs-number">1</span>) * pageSize;       <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> page * pageSize - <span class="hljs-number">1</span>;       <span class="hljs-comment">// 获取 10 条 Feed ID</span>       Set&lt;Integer&gt; feedIds = redisTemplate.opsForZSet().reverseRange(redisFeedKey, start, end);       <span class="hljs-keyword">if</span> (feedIds == <span class="hljs-literal">null</span> || feedIds.isEmpty()) &#123;           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;();       &#125;       Map&lt;Integer, TUser&gt; userMap = tUserService.list().stream().collect(Collectors.toMap(TUser::getId, Function.identity()));       <span class="hljs-comment">// 查询结果</span>       Page&lt;TFeeds&gt; result = page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, pageSize), <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TFeeds&gt;().in(TFeeds::getId, feedIds));       <span class="hljs-comment">// 翻译字典</span>       result.getRecords().forEach(feed -&gt; feed.setUser(userMap.get(feed.getFkUserId())));       <span class="hljs-keyword">return</span> result;   &#125;</code></pre></div><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p class="note note-success">关注/取关</p><p class="note note-info">http://localhost:8080/follow?userId=2&followUserId=1&isFollowed=1</p><p class="note note-success">查询feed列表</p><p class="note note-info">http://localhost:8080/selectFeedPage?userId=2</p><p class="note note-success">删除feed</p><p class="note note-info">http://localhost:8080/delete?id=1&userId=1</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-好友功能</title>
    <link href="/2022/04/11/Redis%E5%BA%94%E7%94%A8-%E5%A5%BD%E5%8F%8B%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/04/11/Redis%E5%BA%94%E7%94%A8-%E5%A5%BD%E5%8F%8B%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="好友功能"><a href="#好友功能" class="headerlink" title="好友功能"></a>好友功能</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>好友功能是目前社交场景的必备功能之一，一般好友相关的功能包含有：关注/取关、我（他）的关注、我（他）的粉丝、共同关注等这样一些功能。</p><p>类似于这样的功能我们如果采用数据库做的话只是单纯得到用户的一些粉丝或者关注列表的话是很简单也很容易实现, 但是如果我想要查出两个甚至多个用户共同关注了哪些人或者想要查询两个或者多个用户的共同粉丝的话就会很麻烦, 效率也不会很高。但是如果你用redis去做的话就会相当的简单而且效率很高。原因是redis自己本身带有专门针对于这种集合的交集、并集、差集的一些操作。</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>总体思路我们采用MySQL + Redis的方式结合完成。MySQL主要是保存落地数据，而利用Redis的<strong>Sets进行集合操作</strong>。Sets拥有去重(我们不能多次关注同一用户)功能<strong>。一个用户我们存贮两个集合：一个是保存用户关注的人 另一个是保存关注用户的人.</strong> 用到的命令是:</p><ul><li>SADD 添加成员；命令格式: SADD key member [member …] —– 关注</li><li>SREM 移除某个成员；命令格式: SREM key member [member …] ——-取关</li><li>SCARD 统计集合内的成员数；命令格式: SCARD key ——-关注/粉丝个数</li><li>SISMEMBER 判断是否是集合成员；命令格式:SISMEMBER key member ———判断是否关注（如果关注那么只可以点击取关）</li><li>SMEMBERS 查询集合内的成员；命令格式: SMEMBERS key ——-列表使用（关注列表和粉丝列表）</li><li>SINTER 查询集合的交集；命令格式: SINTER key [key …] ——–共同关注、我关注的人关注了他</li></ul><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_follow` (  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,  `user_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户&#x27;</span>,  `follow_user_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;粉丝&#x27;</span>,  `is_followed` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;0 关注 1取消关注&#x27;</span>,  `is_valid` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,  `create_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  `update_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">14</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb3 ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;</code></pre></div><h2 id="核心业务代码"><a href="#核心业务代码" class="headerlink" title="核心业务代码"></a>核心业务代码</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">follow</span><span class="hljs-params">(TFollow tFollow)</span> &#123;       <span class="hljs-type">Integer</span> <span class="hljs-variable">followUserId</span> <span class="hljs-operator">=</span> tFollow.getFollowUserId();       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> tFollow.getUserId();       <span class="hljs-type">Integer</span> <span class="hljs-variable">isFollowed</span> <span class="hljs-operator">=</span> tFollow.getIsFollowed();       Assert.isFalse(followUserId == <span class="hljs-literal">null</span> || followUserId &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;请选择要关注的人&quot;</span>);       <span class="hljs-comment">// 获取登录用户信息</span>       <span class="hljs-type">TUser</span> <span class="hljs-variable">tUser</span> <span class="hljs-operator">=</span> tUserService.getById(userId);       <span class="hljs-comment">// 获取当前登录用户与需要关注用户的关注信息</span>       <span class="hljs-type">TFollow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> getOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TFollow&gt;()           .eq(TFollow::getUserId, userId).eq(TFollow::getFollowUserId, followUserId));       <span class="hljs-comment">// 如果没有关注信息，且要进行关注操作</span>       <span class="hljs-keyword">if</span> (follow == <span class="hljs-literal">null</span> &amp;&amp; isFollowed == <span class="hljs-number">1</span>) &#123;           <span class="hljs-comment">// 添加关注信息</span>           follow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TFollow</span>();           follow.setUserId(userId);           follow.setFollowUserId(followUserId);           <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> save(follow);           <span class="hljs-comment">// 添加关注列表到 Redis</span>           <span class="hljs-keyword">if</span> (flag) &#123;               addToRedisSet(userId, followUserId);               <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;关注成功&quot;</span>);           &#125; <span class="hljs-keyword">else</span> &#123;               <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;500&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;关注失败&quot;</span>);           &#125;       &#125;       Assert.isFalse(follow != <span class="hljs-literal">null</span> &amp;&amp; follow.getIsFollowed() == <span class="hljs-number">0</span> &amp;&amp; isFollowed == <span class="hljs-number">1</span>, <span class="hljs-string">&quot;重复关注&quot;</span>);       Assert.isFalse(follow != <span class="hljs-literal">null</span> &amp;&amp; follow.getIsFollowed() == <span class="hljs-number">1</span> &amp;&amp; isFollowed == <span class="hljs-number">0</span>, <span class="hljs-string">&quot;重复取消关注&quot;</span>);       <span class="hljs-comment">// 如果有关注信息，且目前处于取关状态，且要进行关注操作</span>       <span class="hljs-keyword">if</span> (follow != <span class="hljs-literal">null</span> &amp;&amp; follow.getIsFollowed() == <span class="hljs-number">1</span> &amp;&amp; isFollowed == <span class="hljs-number">1</span>) &#123;           <span class="hljs-comment">// 重新关注</span>           follow.setIsFollowed(<span class="hljs-number">0</span>);           <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> updateById(follow);           <span class="hljs-comment">// 添加关注列表</span>           <span class="hljs-keyword">if</span> (flag) &#123;               addToRedisSet(userId, followUserId);               <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;关注成功&quot;</span>);           &#125; <span class="hljs-keyword">else</span> &#123;               <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;500&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;关注失败&quot;</span>);           &#125;       &#125;       <span class="hljs-comment">// 如果有关注信息，且目前处于关注中状态，且要进行取关操作</span>       <span class="hljs-keyword">if</span> (follow != <span class="hljs-literal">null</span> &amp;&amp; follow.getIsFollowed() == <span class="hljs-number">0</span> &amp;&amp; isFollowed == <span class="hljs-number">0</span>) &#123;           follow.setIsFollowed(<span class="hljs-number">1</span>);           <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> updateById(follow);           <span class="hljs-comment">// 移除 Redis 关注列表</span>           <span class="hljs-keyword">if</span> (flag) &#123;               removeFromRedisSet(userId, followUserId);               <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;取关成功&quot;</span>);           &#125; <span class="hljs-keyword">else</span> &#123;               <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;500&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;取关失败&quot;</span>);           &#125;       &#125;       <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;500&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;请先关注&quot;</span>);   &#125;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">findCommonsFriends</span><span class="hljs-params">(TFollow tFollow)</span> &#123;       <span class="hljs-type">Integer</span> <span class="hljs-variable">followUserId</span> <span class="hljs-operator">=</span> tFollow.getFollowUserId();       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> tFollow.getUserId();       <span class="hljs-comment">// 是否选择了关注对象</span>       Assert.isFalse(followUserId == <span class="hljs-literal">null</span> || followUserId &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;请选择要查看的人&quot;</span>);       <span class="hljs-comment">// 登录用户的关注信息</span>       <span class="hljs-type">String</span> <span class="hljs-variable">userKey</span> <span class="hljs-operator">=</span> Constant.REDIS_FOLLOWING_KEY + userId;       <span class="hljs-comment">// 登录用户关注的对象的关注信息</span>       <span class="hljs-type">String</span> <span class="hljs-variable">followersKey</span> <span class="hljs-operator">=</span> Constant.REDIS_FOLLOWING_KEY + followUserId;       <span class="hljs-comment">// 计算交集</span>       Set&lt;Integer&gt; ids = redisTemplate.opsForSet().intersect(userKey, followersKey);       <span class="hljs-comment">// 没有</span>       <span class="hljs-keyword">if</span> (ids == <span class="hljs-literal">null</span> || ids.isEmpty()) &#123;           <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;查询成功&quot;</span>).set(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());       &#125; <span class="hljs-keyword">else</span> &#123;           List&lt;TUser&gt; list = tUserService.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TUser&gt;().in(TUser::getId, ids));           <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;查询成功&quot;</span>).set(<span class="hljs-string">&quot;data&quot;</span>, list);       &#125;   &#125;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">findFollowing</span><span class="hljs-params">(TFollow tFollow)</span> &#123;       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> tFollow.getUserId();       Set&lt;Integer&gt; ids = redisTemplate.opsForSet().members(Constant.REDIS_FOLLOWING_KEY + userId);       List&lt;TUser&gt; list = tUserService.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TUser&gt;().in(TUser::getId, ids));       <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;查询成功&quot;</span>).set(<span class="hljs-string">&quot;data&quot;</span>, list);   &#125;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">findFollowers</span><span class="hljs-params">(TFollow tFollow)</span> &#123;       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> tFollow.getUserId();       Set&lt;Integer&gt; ids = redisTemplate.opsForSet().members(Constant.REDIS_FOLLOWERS_KEY + userId);       List&lt;TUser&gt; list = tUserService.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TUser&gt;().in(TUser::getId, ids));       <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;查询成功&quot;</span>).set(<span class="hljs-string">&quot;data&quot;</span>, list);   &#125;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">public</span> Dict <span class="hljs-title function_">isFollowed</span><span class="hljs-params">(TFollow tFollow)</span> &#123;       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> tFollow.getUserId();       <span class="hljs-type">Integer</span> <span class="hljs-variable">followUserId</span> <span class="hljs-operator">=</span> tFollow.getFollowUserId();       <span class="hljs-type">Boolean</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().isMember(Constant.REDIS_FOLLOWERS_KEY + followUserId, userId);       <span class="hljs-keyword">return</span> Dict.create().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>).set(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;查询成功&quot;</span>).set(<span class="hljs-string">&quot;data&quot;</span>, member);   &#125;   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToRedisSet</span><span class="hljs-params">(Integer userId, Integer followUserId)</span> &#123;       redisTemplate.opsForSet().add(Constant.REDIS_FOLLOWING_KEY + userId, followUserId);       redisTemplate.opsForSet().add(Constant.REDIS_FOLLOWERS_KEY + followUserId, userId);   &#125;   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFromRedisSet</span><span class="hljs-params">(Integer userId, Integer followUserId)</span> &#123;       redisTemplate.opsForSet().remove(Constant.REDIS_FOLLOWING_KEY + userId, followUserId);       redisTemplate.opsForSet().remove(Constant.REDIS_FOLLOWERS_KEY + followUserId, userId);   &#125;</code></pre></div><h2 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h2><p class="note note-success">isFollowed为1关注 为0取关</p><p class="note note-success">user为用户id</p><p class="note note-success">followUserId 为要关注的用户id</p><p class="note note-info">http://localhost:8080/follow?userId=2&followUserId=1&isFollowed=1</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis应用-抢购优惠券</title>
    <link href="/2022/04/10/Redis%E5%BA%94%E7%94%A8-%E6%8A%A2%E8%B4%AD%E4%BC%98%E6%83%A0%E5%88%B8/"/>
    <url>/2022/04/10/Redis%E5%BA%94%E7%94%A8-%E6%8A%A2%E8%B4%AD%E4%BC%98%E6%83%A0%E5%88%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="抢购优惠券"><a href="#抢购优惠券" class="headerlink" title="抢购优惠券"></a>抢购优惠券</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><ul><li>定时开始抢购活动，禁止超卖</li><li>用户抢购限制，一个用户只能购买一单</li></ul><h2 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h2><h4 id="代金券表"><a href="#代金券表" class="headerlink" title="代金券表"></a>代金券表</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_vouchers`;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_vouchers` (                              `id`  <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,                              `title`  <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;代金券标题&#x27;</span> ,                              `thumbnail`  <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;缩略图&#x27;</span> ,                              `amount`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;抵扣金额&#x27;</span> ,                              `price`  <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;售价&#x27;</span> ,                              `status`  <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;-1=过期 0=下架 1=上架&#x27;</span> ,                              `start_use_time`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;开始使用时间&#x27;</span> ,                              `expire_time`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;过期时间&#x27;</span> ,                              `stock`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;库存&#x27;</span> ,                              `stock_left`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;剩余数量&#x27;</span> ,                              `description`  <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;描述信息&#x27;</span> ,                              `clause`  <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;使用条款&#x27;</span> ,                              `create_date`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,                              `update_date`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,                              `remarks`  datetime <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,                              `is_valid` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,                              <span class="hljs-keyword">PRIMARY</span> KEY (`id`)) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span><span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_general_ci AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;</code></pre></div><h4 id="抢购活动表"><a href="#抢购活动表" class="headerlink" title="抢购活动表"></a>抢购活动表</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_seckill_vouchers`;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_seckill_vouchers` (                                      `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,                                      `fk_voucher_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                                      `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                                      `amount` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;库存&#x27;</span>,                                      `start_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                                      `end_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                                      `create_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                                      `update_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                                      `is_valid` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,                                      <span class="hljs-keyword">PRIMARY</span> KEY (`id`)) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;</code></pre></div><h4 id="订单表"><a href="#订单表" class="headerlink" title="订单表"></a>订单表</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_orders`;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_orders` (                            `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,                            `order_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;订单号&#x27;</span>,                            `fk_voucher_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;优惠券id&#x27;</span>,                            `fk_user_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,                            `fk_seckill_id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;如果是抢购订单时，抢购订单的id&#x27;</span>,                            `status` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;订单状态：-1=已取消 0=未支付 1=已支付 2=已消费 3=已过期&#x27;</span>,                            `order_type` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;订单类型：0=正常订单 1=抢购订单&#x27;</span>,                            `create_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                            `update_date` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,                            `is_valid` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,                            <span class="hljs-keyword">PRIMARY</span> KEY (`id`)) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="hljs-operator">=</span>COMPACT;</code></pre></div><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>秒杀场景有以下几个特点：大量用户同时进行抢购操作，系统流量激增，服务器瞬时压力很大；请求数量远大于商品库存量，只有少数客户可以成功抢购；业务流程不复杂，核心功能是下订单。秒杀场景的应对，一般要从以下几个方面进行处理，如下：</p><ol><li>限流：从客户端层面考虑，限制单个客户抢购频率；服务端层面，加强校验，识别请求是否来源于真实的客户端，并限制请求频率，防止恶意刷单；应用层面，可以使用漏桶算法或令牌桶算法实现应用级限流。</li><li>缓存：热点数据都从缓存获得，尽可能减小数据库的访问压力；</li><li>异步：客户抢购成功后立即返回响应，之后通过消息队列，异步处理后续步骤，如发短信、更新数据库等，从而缓解服务器峰值压力。</li><li>分流：单台服务器肯定无法应对抢购期间大量请求造成的压力，需要集群部署服务器，通过负载均衡共同处理客户端请求，分散压力。</li></ol><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>Springboot、MybatisPlus、Redisson、lua</p><h3 id="锁的产生"><a href="#锁的产生" class="headerlink" title="锁的产生"></a>锁的产生</h3><p>聊锁经常会说起线程安全问题，那什么又叫线程安全？线程安全就是线程最终运行的结果跟预想一样就是安全的，否则就是不安全的，解决线程安全有什么方式呢？</p><ul><li>不跨线程共享变量，线程共享的变量改为方法局部级变量</li><li>使状态变量为不可变的，使用final修饰（将变量变为常量）</li><li>在任何访问状态变量的时候使用同步，使用synchronized修饰方法，或使用同步代码块。</li><li>每个共享的可变变量都需要由唯一一个确定的锁保护。使用Lock锁。</li></ul><p><strong>锁是一种保护机制，在多线程的情况下，保证数据操作的一致性。</strong></p><p>Java中，我们通常使用的synchronized或者Lock都是线程锁，对同一个JVM进程内的多个线程有效。因为锁的本质 是内存中存放一个标记，记录获取锁的线程是谁，这个标记对每个线程都可见。比如我们启动的多个秒杀服务，就是多个JVM，内存中的锁显然是不共享的，每个JVM进程都有自己的锁，自然无法保证线程的互斥了，这个时候我们就需要使用到分布式锁了。</p><h3 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h3><p>方式有三种：基于数据库；基于Zookeeper调度中心；<strong>基于Redis</strong></p><h3 id="分布式锁条件"><a href="#分布式锁条件" class="headerlink" title="分布式锁条件"></a>分布式锁条件</h3><p><strong>实现分布式锁要满足3点：多进程可见，互斥，可重入。</strong></p><h4 id="多进程可见"><a href="#多进程可见" class="headerlink" title="多进程可见"></a>多进程可见</h4><p>Redis本身就是基于JVM之外的，因此满足多进程可见的要求。</p><h4 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h4><p>同一时间只能有一个进程获取锁标记，我们可以通过redis的setnx实现，只有第一次执行的才会成功并返回1，其它情况返回0。<code>setnx key value</code>将key设置值为value，如果key不存在，这种情况下等同SET命令。 当key存在时，什么也不做。SETNX是”SET if Not eXists”的简写。</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第一次设置lock，成功返回1</span>127.0.0.1:0&gt;setnx lock 123&quot;1&quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">如果存在，再次设置会返回0</span>127.0.0.1:0&gt;setnx lock 123&quot;0&quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">获取lock</span>127.0.0.1:0&gt;get lock&quot;123&quot;</code></pre></div><h5 id="解决死锁"><a href="#解决死锁" class="headerlink" title="解决死锁"></a>解决死锁</h5><p>但是使用setnx命令设置锁会出现死锁情况，比如当我get lock以后出现了异常以后并没有将锁删除，而且这把锁也没有过期时间，因此其他请求就再也获取不到这把锁了，这就是死锁。于是，后来Redis对<code>set</code>指令进行了改进，可以添加过期时间。当然有人会使用<code>expire</code>指令将key进行过期，但这样就不能保证<code>setnx</code>和<code>expire</code>的原子操作了。</p><div class="code-wrapper"><pre><code class="hljs shell">SET KEY VALUE EX [seconds] PX [milliseconds] NX XX<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">EX seconds – 设置键key的过期时间，单位时秒</span><span class="hljs-meta prompt_"># </span><span class="language-bash">PX milliseconds – 设置键key的过期时间，单位时毫秒</span><span class="hljs-meta prompt_"># </span><span class="language-bash">NX – 只有键key不存在的时候才会设置key的值</span><span class="hljs-meta prompt_"># </span><span class="language-bash">XX – 只有键key存在的时候才会设置key的值</span></code></pre></div><p><strong>因此 set lock 123 EX 60 NX == setnx lock 123 + expire lock 60，而且set是原子操作，因此如果使用最简单的Redis分布式锁的话就可以使用set指令</strong></p><p>代码如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLock</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOCK_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;OK&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">UNLOCK_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 尝试获取分布式锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jedis Redis客户端</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 锁的值</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 超期时间</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否获取成功</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(Jedis jedis, String lockKey,</span><span class="hljs-params">                                  String value, <span class="hljs-type">int</span> expireTime)</span> &#123;        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;            <span class="hljs-comment">// set key value ex seconds nx(只有键不存在的时候才会设置key)</span>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(lockKey, value,                    SetParams.setParams().ex(expireTime).nx());            <span class="hljs-keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 释放分布式锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jedis Redis客户端</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否释放成功</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(Jedis jedis, String lockKey)</span> &#123;        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.del(lockKey);        <span class="hljs-keyword">if</span> (UNLOCK_SUCCESS == result) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;</code></pre></div><p>测试代码：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLockTest</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">(Jedis jedis)</span> &#123;        <span class="hljs-comment">// 加锁</span>        <span class="hljs-type">boolean</span> <span class="hljs-variable">locked</span> <span class="hljs-operator">=</span> RedisLock.tryLock(jedis, lockKey,                UUID.randomUUID().toString(), <span class="hljs-number">60</span>);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (locked) &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;                    count ++;                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            RedisLock.unlock(jedis, lockKey);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">RedisLockTest</span> <span class="hljs-variable">redisLockTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisLockTest</span>();        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">jedisPoolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();        jedisPoolConfig.setMinIdle(<span class="hljs-number">1</span>);        jedisPoolConfig.setMaxTotal(<span class="hljs-number">5</span>);        <span class="hljs-type">JedisPool</span> <span class="hljs-variable">jedisPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jedisPoolConfig, <span class="hljs-string">&quot;127.0.0.1&quot;</span>,                <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; redisLockTest.call(jedisPool.getResource()));        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; redisLockTest.call(jedisPool.getResource()));        t1.start();        t2.start();        t1.join();        t2.join();        System.out.println(redisLockTest.count);    &#125;&#125;</code></pre></div><h5 id="释放锁时BUG"><a href="#释放锁时BUG" class="headerlink" title="释放锁时BUG"></a>释放锁时BUG</h5><ol><li>3个进程：A和B和C，在执行任务，并争抢锁，此时A获取了锁，并设置自动过期时间为60s</li><li>A开始执行业务，因为某种原因，业务阻塞，耗时超过了60秒，此时锁自动释放了</li><li>B恰好此时开始尝试获取锁，因为锁已经自动释放，成功获取锁</li><li>A此时业务执行完毕，执行释放锁逻辑（删除key），于是B的锁被释放了，而B其实还在执行业务</li><li>此时进程C尝试获取锁，也成功了，因为A把B的锁删除了。</li></ol><p><strong>问题出现了：</strong>B和C同时获取了锁，违反了互斥性！如何解决这个问题呢？我们应该在删除锁之前，判断这个锁是否是自己设置的锁，如果不是（例如自己 的锁已经超时释放），那么就不要删除了。所以我们可以在set 锁时，存入当前线程的唯一标识！删除锁前，判断下里面的值是不是与自己标识释放一 致，如果不一致，说明不是自己的锁，就不要删除了。</p><p><strong>解决方法：</strong>解锁的时候必须是自己的锁才能解除，否则不能解除</p><p>代码调整如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLock02</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOCK_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;OK&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">UNLOCK_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 尝试获取分布式锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jedis Redis客户端</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestId 锁的值</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 超期时间</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否获取成功</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(Jedis jedis, String lockKey,</span><span class="hljs-params">                                  String requestId, <span class="hljs-type">int</span> expireTime)</span> &#123;        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;            <span class="hljs-comment">// set key value ex seconds nx(只有键不存在的时候才会设置key)</span>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(lockKey, requestId,                    SetParams.setParams().ex(expireTime).nx());            <span class="hljs-keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 释放分布式锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jedis Redis客户端</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否释放成功</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(Jedis jedis,  String lockKey, String requestId)</span> &#123;        <span class="hljs-keyword">if</span> (!jedis.get(lockKey).equals(requestId)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.del(lockKey);        <span class="hljs-type">return</span> <span class="hljs-variable">UNLOCK_SUCCESS</span> <span class="hljs-operator">=</span>= result ? <span class="hljs-literal">true</span>: <span class="hljs-literal">false</span>;    &#125;&#125;</code></pre></div><p>测试：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLockTest2</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">(Jedis jedis)</span> &#123;        <span class="hljs-comment">// 加锁</span>        <span class="hljs-type">String</span> <span class="hljs-variable">requestId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();        <span class="hljs-type">boolean</span> <span class="hljs-variable">locked</span> <span class="hljs-operator">=</span> RedisLock02.tryLock(jedis, lockKey,                requestId, <span class="hljs-number">60</span>);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (locked) &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;                    count ++;                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            RedisLock02.unlock(jedis, lockKey, requestId);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">RedisLockTest2</span> <span class="hljs-variable">redisLockTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisLockTest2</span>();        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">jedisPoolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();        jedisPoolConfig.setMinIdle(<span class="hljs-number">1</span>);        jedisPoolConfig.setMaxTotal(<span class="hljs-number">5</span>);        <span class="hljs-type">JedisPool</span> <span class="hljs-variable">jedisPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jedisPoolConfig, <span class="hljs-string">&quot;127.0.0.1&quot;</span>,                <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; redisLockTest.call(jedisPool.getResource()));        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; redisLockTest.call(jedisPool.getResource()));        t1.start();        t2.start();        t1.join();        t2.join();        System.out.println(redisLockTest.count);    &#125;&#125;</code></pre></div><p>按照上面方式实现分布式锁之后，就可以轻松解决大部分问题了。但是仍然有些场景是不满足的，例如一个方法获取到锁之后，可能在方法内调这个方法此时就获取不到锁了。这个时候我们就需要把锁改进成<strong>可重入锁</strong>了。</p><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>重入锁，指的是以线程为单位，当一个线程获取对象锁之后，这个线程可以再次获取本对象上的锁，而其他的线程是不可以的。可重入锁的意义在于防止死锁。</p><p><strong>实现原理</strong>是通过为每个锁关联一个请求计数器和一个占有它的线程。当计数为0时，认为锁是未被占有的；线程请求一个未被占有的锁时，JVM将记录锁的占有者，并且将请求计数器置为1 。</p><p>如果同一个线程再次请求这个锁，计数将递增；每次占用线程退出同步块，计数器值将递减。直到计数器为0,锁被释放。</p><p>关于父类和子类的锁的重入：子类覆写了父类的synchonized方法，然后调用父类中的方法，此时如果没有重入的锁，那么这段代码将产生死锁。</p><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><h5 id="不可重入锁"><a href="#不可重入锁" class="headerlink" title="不可重入锁"></a>不可重入锁</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lock</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLocked</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">while</span> (isLocked) &#123;            <span class="hljs-keyword">try</span> &#123;                wait();            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        isLocked = <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;        isLocked = <span class="hljs-literal">false</span>;        notify();    &#125;&#125;</code></pre></div><p>使用该锁：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnReentrantLockDemo</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lock</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;        lock.lock();        inc();        lock.unlock();    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inc</span><span class="hljs-params">()</span> &#123;        lock.lock();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;            count ++;        &#125;        lock.unlock();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">UnReentrantLockDemo</span> <span class="hljs-variable">unReentrantLockDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnReentrantLockDemo</span>();        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt; unReentrantLockDemo.call());        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; unReentrantLockDemo.call());        t1.start();        t2.start();        t1.join();        t2.join();        System.out.println(unReentrantLockDemo.count);    &#125;&#125;</code></pre></div><p>当前线程执行call()方法首先获取lock，接下来执行inc()方法就无法执行inc()中的逻辑，必须先释放锁。这个例子很好的说明了不可重入锁。</p><h5 id="可重入锁-1"><a href="#可重入锁-1" class="headerlink" title="可重入锁"></a>可重入锁</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 为每个锁关联一个请求计数器和一个占有它的线程。</span><span class="hljs-comment"> * 当计数为0时，认为锁是未被占有的；</span><span class="hljs-comment"> * 线程请求一个未被占有的锁时，JVM将记录锁的占有者，并且将请求计数器置为1 。</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> &#123;    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLocked</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-type">Thread</span> <span class="hljs-variable">lockBy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 独占线程</span>    <span class="hljs-type">int</span> <span class="hljs-variable">lockedCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数器</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();        <span class="hljs-keyword">while</span> (isLocked &amp;&amp; lockBy != thread) &#123; <span class="hljs-comment">// 判断加锁，而且线程不是当前线程</span>            wait();        &#125;        isLocked = <span class="hljs-literal">true</span>;        lockedCount++; <span class="hljs-comment">// 计数器 +1</span>        lockBy = thread;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">if</span> (Thread.currentThread() == <span class="hljs-built_in">this</span>.lockBy) &#123; <span class="hljs-comment">// 判断是否是当前线程</span>            lockedCount--;            <span class="hljs-keyword">if</span> (lockedCount == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 计数器为0时，释放锁</span>                isLocked = <span class="hljs-literal">false</span>;                notify();            &#125;        &#125;    &#125;&#125;</code></pre></div><p>测试可重入锁</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLockDemo</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">try</span> &#123;            lock.lock();        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        inc();        lock.unlock();    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inc</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">try</span> &#123;            lock.lock();        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;            count ++;        &#125;        lock.unlock();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">ReentrantLockDemo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLockDemo</span>();        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt; demo.call());        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; demo.call());        t1.start();        t2.start();        t1.join();        t2.join();        System.out.println(demo.count);    &#125;&#125;</code></pre></div><p>所谓可重入，意味着线程可以进入它已经拥有的锁的同步代码块儿。</p><p>我们设计两个线程调用call()方法，第一个线程调用call()方法获取锁，进入lock()方法，由于初始lockedBy是null，所以不会进入while而挂起当前线程，而是是增量lockedCount并记录lockBy为第一个线程。接着第一个线程进入inc()方法，由于同一进程，所以不会进入while而挂起，接着增量lockedCount，当第二个线程尝试lock，由于isLocked=true,所以他不会获取该锁，直到第一个线程调用两次unlock()将lockCount递减为0，才将标记为isLocked设置为false。</p><h4 id="Redis可重入锁"><a href="#Redis可重入锁" class="headerlink" title="Redis可重入锁"></a>Redis可重入锁</h4><h5 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h5><div class="code-wrapper"><pre><code class="hljs java">假设锁的key为“ lock ”，hashKey是当前线程的id：“ threadId ”，锁自动释放时间假设为<span class="hljs-number">20</span>获取锁的步骤：<span class="hljs-number">1</span>、判断lock是否存在 EXISTS lock <span class="hljs-number">2</span>、不存在，则自己获取锁，记录重入层数为<span class="hljs-number">1.</span><span class="hljs-number">3</span>、存在，说明有人获取锁了，下面判断是不是自己的锁,即判断当前线程id作为hashKey是否存在：HEXISTS lock threadId <span class="hljs-number">4</span>、不存在，说明锁已经有了，且不是自己获取的，锁获取失败.<span class="hljs-number">5</span>、存在，说明是自己获取的锁，重入次数+<span class="hljs-number">1</span>： HINCRBY lock threadId <span class="hljs-number">1</span> ，最后更新锁自动释放时间， EXPIRE lock <span class="hljs-number">20</span>        释放锁的步骤：<span class="hljs-number">1</span>、判断当前线程id作为hashKey是否存在： HEXISTS lock threadId <span class="hljs-number">2</span>、不存在，说明锁已经失效，不用管了 <span class="hljs-number">3</span>、存在，说明锁还在，重入次数减<span class="hljs-number">1</span>： HINCRBY lock threadId -<span class="hljs-number">1</span> ，<span class="hljs-number">4</span>、获取新的重入次数，判断重入次数是否为<span class="hljs-number">0</span>，为<span class="hljs-number">0</span>说明锁全部释放，删除key： DEL lock</code></pre></div><p>因此，存储在锁中的信息就必须包含：key、线程标识、重入次数。不能再使用简单的key-value结构， 这里推荐使用hash结构。而且要让所有指令都在同一个线程中操作，那么使用lua脚本</p><h5 id="设计lock-lua脚本"><a href="#设计lock-lua脚本" class="headerlink" title="设计lock.lua脚本"></a>设计lock.lua脚本</h5><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> key = KEYS[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 第1个参数,锁的key</span><span class="hljs-keyword">local</span> threadId = ARGV[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 第2个参数,线程唯一标识</span><span class="hljs-keyword">local</span> releaseTime = ARGV[<span class="hljs-number">2</span>]; <span class="hljs-comment">-- 第3个参数,锁的自动释放时间</span><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;exists&#x27;</span>, key) == <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> <span class="hljs-comment">-- 判断锁是否已存在</span>    redis.call(<span class="hljs-string">&#x27;hset&#x27;</span>, key, threadId, <span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-comment">-- 不存在, 则获取锁</span>    redis.call(<span class="hljs-string">&#x27;expire&#x27;</span>, key, releaseTime); <span class="hljs-comment">-- 设置有效期</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 返回结果</span><span class="hljs-keyword">end</span>;<span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span> <span class="hljs-comment">-- 锁已经存在，判断threadId是否是自己    </span>    redis.call(<span class="hljs-string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-comment">-- 如果是自己，则重入次数+1</span>    redis.call(<span class="hljs-string">&#x27;expire&#x27;</span>, key, releaseTime); <span class="hljs-comment">-- 设置有效期</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 返回结果</span><span class="hljs-keyword">end</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 代码走到这里,说明获取锁的不是自己，获取锁失败</span></code></pre></div><h5 id="设计unlock-lua脚本"><a href="#设计unlock-lua脚本" class="headerlink" title="设计unlock.lua脚本"></a>设计unlock.lua脚本</h5><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> key = KEYS[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 第1个参数,锁的key</span><span class="hljs-keyword">local</span> threadId = ARGV[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 第2个参数,线程唯一标识</span><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> <span class="hljs-comment">-- 判断当前锁是否还是被自己持有</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>; <span class="hljs-comment">-- 如果已经不是自己，则直接返回</span><span class="hljs-keyword">end</span>;<span class="hljs-keyword">local</span> count = redis.call(<span class="hljs-string">&#x27;HINCRBY&#x27;</span>, key, threadId, <span class="hljs-number">-1</span>); <span class="hljs-comment">-- 是自己的锁，则重入次数-1</span><span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> <span class="hljs-comment">-- 判断是否重入次数是否已经为0</span>    redis.call(<span class="hljs-string">&#x27;DEL&#x27;</span>, key); <span class="hljs-comment">-- 等于0说明可以释放锁，直接删除</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;    <span class="hljs-keyword">end</span>;</code></pre></div><h5 id="编写RedisLock类"><a href="#编写RedisLock类" class="headerlink" title="编写RedisLock类"></a>编写RedisLock类</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLock</span> &#123;    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;    <span class="hljs-keyword">private</span> DefaultRedisScript&lt;Long&gt; lockScript;    <span class="hljs-keyword">private</span> DefaultRedisScript&lt;Object&gt; unlockScript;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisLock</span><span class="hljs-params">(RedisTemplate redisTemplate)</span> &#123;        <span class="hljs-built_in">this</span>.redisTemplate = redisTemplate;        <span class="hljs-comment">// 加载释放锁的脚本</span>        <span class="hljs-built_in">this</span>.lockScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();        <span class="hljs-built_in">this</span>.lockScript.setScriptSource(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceScriptSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;lock.lua&quot;</span>)));        <span class="hljs-built_in">this</span>.lockScript.setResultType(Long.class);        <span class="hljs-comment">// 加载释放锁的脚本</span>        <span class="hljs-built_in">this</span>.unlockScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();        <span class="hljs-built_in">this</span>.unlockScript.setScriptSource(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceScriptSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>)));    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockName 锁名称</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> releaseTime 超时时间(单位:秒)</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> key 解锁标识</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String lockName, <span class="hljs-type">long</span> releaseTime)</span> &#123;        <span class="hljs-comment">// 存入的线程信息的前缀，防止与其它JVM中线程信息冲突</span>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();        <span class="hljs-comment">// 执行脚本</span>        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Long)redisTemplate.execute(                lockScript,                Collections.singletonList(lockName),                key + Thread.currentThread().getId(), releaseTime);        <span class="hljs-comment">// 判断结果</span>        <span class="hljs-keyword">if</span>(result != <span class="hljs-literal">null</span> &amp;&amp; result.intValue() == <span class="hljs-number">1</span>) &#123;            <span class="hljs-keyword">return</span> key;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 释放锁</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockName 锁名称</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 解锁标识</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String lockName, String key)</span> &#123;        <span class="hljs-comment">// 执行脚本</span>        redisTemplate.execute(                unlockScript,                Collections.singletonList(lockName),                key + Thread.currentThread().getId(), <span class="hljs-literal">null</span>);    &#125;&#125;</code></pre></div><h5 id="初始化Bean"><a href="#初始化Bean" class="headerlink" title="初始化Bean"></a>初始化Bean</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLockConfiguration</span> &#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> RedisLock <span class="hljs-title function_">redisLock</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">RedisLock</span> <span class="hljs-variable">redisLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisLock</span>(redisTemplate);        <span class="hljs-keyword">return</span> redisLock;    &#125;&#125;</code></pre></div><h2 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>       <span class="hljs-comment">&lt;!-- spring-boot --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- redis --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- mysql --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- lombok --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- freemarker --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;freemarker.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- rabbitMq --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- mybatisplus --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.plus.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatisplus.generator.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- hutool工具类 --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- guava工具类 --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/redis?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=GMT%2B8</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span>    <span class="hljs-attr">initialization-mode:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">continue-on-error:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">schema:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;classpath:db/schema.sql&quot;</span>    <span class="hljs-attr">data:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;classpath:db/data.sql&quot;</span>    <span class="hljs-attr">hikari:</span>      <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span>      <span class="hljs-attr">connection-test-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span>      <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">20</span>      <span class="hljs-attr">auto-commit:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">idle-timeout:</span> <span class="hljs-number">30000</span>      <span class="hljs-attr">pool-name:</span> <span class="hljs-string">SpringBootDemoHikariCP</span>      <span class="hljs-attr">max-lifetime:</span> <span class="hljs-number">60000</span>      <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">30000</span>  <span class="hljs-attr">rabbitmq:</span>    <span class="hljs-attr">listener:</span>      <span class="hljs-attr">simple:</span>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">auto</span>  <span class="hljs-comment"># 消息确认方式，其有三种配置方式，分别是none、manual(手动ack) 和auto(自动ack) 默认auto</span>        <span class="hljs-attr">retry:</span>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#监听重试是否可用</span>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span>   <span class="hljs-comment">#最大重试次数 默认为3</span>          <span class="hljs-attr">initial-interval:</span> <span class="hljs-number">2000</span>  <span class="hljs-comment"># 传递消息的时间间隔 默认1s</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>  <span class="hljs-attr">thymeleaf:</span>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML</span>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span>    <span class="hljs-attr">servlet:</span>      <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">redis:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-comment"># 连接超时时间（记得添加单位，Duration）</span>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">1000ms</span>    <span class="hljs-comment"># Redis默认情况下有16个分片</span>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span>    <span class="hljs-attr">lettuce:</span>      <span class="hljs-attr">pool:</span>        <span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span>        <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span>        <span class="hljs-comment"># 连接池中的最大空闲连接 默认 8</span>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>        <span class="hljs-comment"># 连接池中的最小空闲连接 默认 0</span>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>  <span class="hljs-attr">cache:</span>    <span class="hljs-comment"># 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><span class="hljs-attr">logging:</span>  <span class="hljs-attr">level:</span>    <span class="hljs-attr">com.ocrud:</span> <span class="hljs-string">debug</span><span class="hljs-attr">mybatis-plus:</span>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mapper/*.xml,classpath:/com/ocrud/mapper/xml/*.xml</span>  <span class="hljs-comment">#实体扫描，多个package用逗号或者分号分隔</span>  <span class="hljs-attr">typeAliasesPackage:</span> <span class="hljs-string">com.ocrud.entity</span>  <span class="hljs-attr">global-config:</span>    <span class="hljs-comment"># 数据库相关配置</span>    <span class="hljs-attr">db-config:</span>      <span class="hljs-comment">#主键类型  AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;,ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;, UUID:&quot;全局唯一ID UUID&quot;;</span>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>      <span class="hljs-comment">#字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;</span>      <span class="hljs-attr">field-strategy:</span> <span class="hljs-string">not_empty</span>      <span class="hljs-comment">#驼峰下划线转换</span>      <span class="hljs-attr">table-underline:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment">#是否开启大写命名，默认不开启</span>      <span class="hljs-comment">#capital-mode: true</span>      <span class="hljs-comment">#逻辑删除配置</span>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span>      <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span>    <span class="hljs-comment">#刷新mapper 调试神器</span>    <span class="hljs-attr">refresh:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 原生配置</span>  <span class="hljs-attr">configuration:</span>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">cache-enabled:</span> <span class="hljs-literal">false</span></code></pre></div><h3 id="核心业务代码"><a href="#核心业务代码" class="headerlink" title="核心业务代码"></a>核心业务代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><span class="hljs-meta">@Override</span><span class="hljs-meta">@Transactional(rollbackFor = &#123; SQLException.class &#125;)</span><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">doSeckill</span><span class="hljs-params">(Integer seckillVouchersId, Integer userId)</span> &#123;    <span class="hljs-comment">// 基本参数校验</span>    Assert.isFalse(seckillVouchersId == <span class="hljs-literal">null</span> || seckillVouchersId &lt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;请选择需要抢购的代金券&quot;</span>);    <span class="hljs-comment">// 判断此代金券是否加入抢购</span>    <span class="hljs-type">TSeckillVouchers</span> <span class="hljs-variable">seckillVouchers</span> <span class="hljs-operator">=</span> getById(seckillVouchersId);    Assert.isFalse(seckillVouchers == <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;该代金券并未有抢购活动&quot;</span>);    <span class="hljs-comment">// 判断是否有效</span>    Assert.isFalse(seckillVouchers.getIsValid() == <span class="hljs-number">1</span>, <span class="hljs-string">&quot;该活动已结束&quot;</span>);    <span class="hljs-comment">// 判断是否开始、结束</span>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();    Assert.isFalse(now.isBefore(seckillVouchers.getStartTime()), <span class="hljs-string">&quot;该抢购还未开始&quot;</span>);    Assert.isFalse(now.isAfter(seckillVouchers.getEndTime()), <span class="hljs-string">&quot;该抢购已结束&quot;</span>);    <span class="hljs-type">Integer</span> <span class="hljs-variable">voucherId</span> <span class="hljs-operator">=</span> seckillVouchers.getFkVoucherId();    <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;seckillVouchersId:&quot;</span> + seckillVouchersId + <span class="hljs-string">&quot;:&quot;</span> + Constant.REDIS_VOUCHER_KEY + voucherId;    Map&lt;String, Object&gt; seckillVoucherMaps = redisTemplate.opsForHash().entries(redisKey);    <span class="hljs-type">TVouchers</span> <span class="hljs-variable">tVouchers</span> <span class="hljs-operator">=</span> BeanUtil.mapToBean(seckillVoucherMaps, TVouchers.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);    <span class="hljs-comment">// 获取登录用户信息 如果userId不为空则模拟单一用户重复下单</span>    <span class="hljs-keyword">if</span> (userId == <span class="hljs-literal">null</span>) &#123;        userId = Integer.valueOf(RandomUtil.randomNumbers(<span class="hljs-number">9</span>));    &#125;    <span class="hljs-comment">// 判断登录用户是否已抢到(一个用户针对这次活动只能买一次)</span>    <span class="hljs-type">TOrders</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> tOrdersService.findDinerOrder(userId,            seckillVouchers.getFkVoucherId());    Assert.isFalse(order != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;该用户已抢到该代金券，无需再抢&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">lockName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;seckillVouchersId:&quot;</span> + seckillVouchersId + Constant.REDIS_VOUCHER_KEY + voucherId + <span class="hljs-string">&quot;:&quot;</span> + userId;    <span class="hljs-comment">// 加锁并设置失效时间</span>    <span class="hljs-type">long</span> <span class="hljs-variable">lockTime</span> <span class="hljs-operator">=</span> Duration.between(tVouchers.getExpireTime(), LocalDateTime.now()).getSeconds();    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisson.getLock(lockName);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-type">boolean</span> <span class="hljs-variable">lockFlag</span> <span class="hljs-operator">=</span> lock.tryLock(lockTime, TimeUnit.SECONDS);        <span class="hljs-comment">// 拿到锁</span>        <span class="hljs-keyword">if</span> (lockFlag) &#123;            <span class="hljs-comment">// 下单</span>            <span class="hljs-type">TOrders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TOrders</span>();            orders.setFkUserId(userId);            orders.setFkSeckillId(seckillVouchers.getId());            orders.setFkVoucherId(voucherId);            <span class="hljs-type">String</span> <span class="hljs-variable">orderNo</span> <span class="hljs-operator">=</span> IdUtil.getSnowflake(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).nextIdStr();            orders.setOrderNo(orderNo);            orders.setOrderType(<span class="hljs-number">1</span>);            orders.setStatus(<span class="hljs-number">0</span>);            <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> tOrdersService.save(orders);            <span class="hljs-comment">// 扣库存</span>            List&lt;String&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();            keys.add(redisKey);            keys.add(<span class="hljs-string">&quot;stockLeft&quot;</span>);            <span class="hljs-type">Long</span> <span class="hljs-variable">stockLeft</span> <span class="hljs-operator">=</span> (Long) redisTemplate.execute(redisScript, keys);            Assert.isFalse(stockLeft == <span class="hljs-literal">null</span> || stockLeft &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;该代金券已经卖完了&quot;</span>);            <span class="hljs-comment">// 异步更新</span>            rabbitTemplate.convertAndSend(Constant.RABBIT_EXCHANGE_NAME, Constant.RABBIT_KEY_NAME, voucherId + <span class="hljs-string">&quot;&quot;</span>);        &#125;    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();        lock.unlock();        <span class="hljs-keyword">throw</span> e;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre></div><h3 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h3><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;hexists&#x27;</span>, KEYS[<span class="hljs-number">1</span>], KEYS[<span class="hljs-number">2</span>]) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><span class="hljs-keyword">local</span> stock = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">1</span>], KEYS[<span class="hljs-number">2</span>]));<span class="hljs-keyword">if</span> (stock &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>   redis.call(<span class="hljs-string">&#x27;hincrby&#x27;</span>, KEYS[<span class="hljs-number">1</span>], KEYS[<span class="hljs-number">2</span>], <span class="hljs-number">-1</span>);   <span class="hljs-keyword">return</span> stock;<span class="hljs-keyword">end</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-keyword">end</span>;</code></pre></div><h3 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@AutoConfigureAfter(RedisAutoConfiguration.class)</span><span class="hljs-meta">@EnableCaching</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * redisTemplate 序列化使用的jdkSerializeable, 存储二进制字节码, 所以自定义序列化类</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisConnectionFactory</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;String, Object&gt;();        template.setConnectionFactory(redisConnectionFactory);        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance ,                ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);        <span class="hljs-comment">//LocalDatetime序列化</span>        <span class="hljs-type">JavaTimeModule</span> <span class="hljs-variable">timeModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaTimeModule</span>();        timeModule.addDeserializer(LocalDate.class,                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)));        timeModule.addDeserializer(LocalDateTime.class,                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));        timeModule.addSerializer(LocalDate.class,                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)));        timeModule.addSerializer(LocalDateTime.class,                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);        om.registerModule(timeModule);        jackson2JsonRedisSerializer.setObjectMapper(om);        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();        <span class="hljs-comment">// key采用String的序列化方式</span>        template.setKeySerializer(stringRedisSerializer);        <span class="hljs-comment">// hash的key也采用String的序列化方式</span>        template.setHashKeySerializer(stringRedisSerializer);        <span class="hljs-comment">// value序列化方式采用jackson</span>        template.setValueSerializer(jackson2JsonRedisSerializer);        <span class="hljs-comment">// hash的value序列化方式采用jackson</span>        template.setHashValueSerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        <span class="hljs-keyword">return</span> template;    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> DefaultRedisScript&lt;Long&gt; <span class="hljs-title function_">stockScript</span><span class="hljs-params">()</span> &#123;        DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();        <span class="hljs-comment">//放在和application.yml 同层目录下</span>        redisScript.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;stock.lua&quot;</span>));        redisScript.setResultType(Long.class);        <span class="hljs-keyword">return</span> redisScript;    &#125;&#125;</code></pre></div><h3 id="rabbitMq消费端"><a href="#rabbitMq消费端" class="headerlink" title="rabbitMq消费端"></a>rabbitMq消费端</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Slf4j</span><span class="hljs-meta">@RabbitListener(queues = Constant.RABBIT_QUEUE_NAME)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KillReceiver</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TVouchersService tVouchersService;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TOrdersService tOrdersService;    <span class="hljs-meta">@SneakyThrows</span>    <span class="hljs-meta">@RabbitHandler</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String msg)</span> &#123;        <span class="hljs-type">TVouchers</span> <span class="hljs-variable">tVouchers</span> <span class="hljs-operator">=</span> tVouchersService.getById(msg);        tVouchers.setStockLeft(tVouchers.getStock() - tOrdersService.count(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TOrders&gt;().eq(TOrders::getFkVoucherId, msg)));        tVouchersService.updateById(tVouchers);    &#125;&#125;</code></pre></div><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>增加优惠券缓存到redis</p><p class="note note-info">http://localhost:8080/addVouchersCache?voucherId=1&seckillVouchersId=1</p><p>并发抢购</p><p class="note note-info">http://localhost:8080/doSeckill?seckillVouchersId=1</p><p>单一用户并发抢购</p><p class="note note-info">http://localhost:8080/doSeckill?seckillVouchersId=1&userId=1</p><h3 id="测试前数据"><a href="#测试前数据" class="headerlink" title="测试前数据"></a>测试前数据</h3><h4 id="redis存储键值对"><a href="#redis存储键值对" class="headerlink" title="redis存储键值对"></a>redis存储键值对</h4><p><img src="https://cdn.ocrud.com/img/202204111832448.png" alt="redis存储键值对"></p><h4 id="未插入前代金券表数据"><a href="#未插入前代金券表数据" class="headerlink" title="未插入前代金券表数据"></a>未插入前代金券表数据</h4><p><img src="https://cdn.ocrud.com/img/202204111833347.png" alt="未插入前代金券表数据"></p><h4 id="未插入前订单表数据"><a href="#未插入前订单表数据" class="headerlink" title="未插入前订单表数据"></a>未插入前订单表数据</h4><p><img src="https://cdn.ocrud.com/img/202204111835427.png" alt="未插入前订单表数据"></p><h4 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h4><p><img src="https://cdn.ocrud.com/img/202204111836187.png"></p><h3 id="测试后数据"><a href="#测试后数据" class="headerlink" title="测试后数据"></a>测试后数据</h3><h4 id="代金券表数据"><a href="#代金券表数据" class="headerlink" title="代金券表数据"></a>代金券表数据</h4><p><img src="https://cdn.ocrud.com/img/202204111850277.png"></p><h4 id="订单表数据"><a href="#订单表数据" class="headerlink" title="订单表数据"></a>订单表数据</h4><p><img src="https://cdn.ocrud.com/img/202204111850758.png"></p><p>压力测试通过</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol><li><p><strong>JDK8 LocalDatetime Redis序列化问题</strong>  在配置文件中解决</p></li><li><p><strong>RabbitMQ 传输对象序列化问题</strong>  采用用json字符串序列反序列解决</p></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>项目地址 <a href="https://github.com/hugqq/Redis">https://github.com/hugqq/Redis</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL速查</title>
    <link href="/2022/04/06/SQL%E9%80%9F%E6%9F%A5/"/>
    <url>/2022/04/06/SQL%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-速查表"><a href="#SQL-速查表" class="headerlink" title="SQL 速查表"></a>SQL 速查表</h1><h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><table><thead><tr><th align="center">文本处理函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ASCII(char)</td><td align="center">返回字符的ASCII码值</td></tr><tr><td align="center">BIT_LENGTH(str)</td><td align="center">返回字符串的比特长度</td></tr><tr><td align="center">CONCAT(s1,s2…,sn)</td><td align="center">将s1,s2…,sn连接成字符串</td></tr><tr><td align="center">CONCAT_WS(sep,s1,s2…,sn)</td><td align="center">将s1,s2…,sn连接成字符串，并用sep字符间隔</td></tr><tr><td align="center">INSERT(str,x,y,instr)</td><td align="center">将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果</td></tr><tr><td align="center">FIND_IN_SET(str,list)</td><td align="center">分析逗号分隔的list列表，如果发现str，返回str在list中的位置</td></tr><tr><td align="center">REGEXP(str)</td><td align="center">正则匹配</td></tr><tr><td align="center">LCASE(str)或LOWER(str)</td><td align="center">返回将字符串str中所有字符改变为小写后的结果</td></tr><tr><td align="center">LEFT(str,x)</td><td align="center">返回字符串str中最左边的x个字符</td></tr><tr><td align="center">LENGTH(s)</td><td align="center">返回字符串str中的字符数</td></tr><tr><td align="center">LTRIM(str)</td><td align="center">从字符串str中切掉开头的空格</td></tr><tr><td align="center">POSITION(substr,str)</td><td align="center">返回子串substr在字符串str中第一次出现的位置</td></tr><tr><td align="center">QUOTE(str)</td><td align="center">用反斜杠转义str中的单引号</td></tr><tr><td align="center">REPEAT(str,srchstr,rplcstr)</td><td align="center">返回字符串str重复x次的结果</td></tr><tr><td align="center">REVERSE(str)</td><td align="center">返回颠倒字符串str的结果</td></tr><tr><td align="center">RIGHT(str,x)</td><td align="center">返回字符串str中最右边的x个字符</td></tr><tr><td align="center">RTRIM(str)</td><td align="center">返回字符串str尾部的空格</td></tr><tr><td align="center">STRCMP(s1,s2)</td><td align="center">比较字符串s1和s2</td></tr><tr><td align="center">TRIM(str)</td><td align="center">去除字符串首部和尾部的所有空格</td></tr><tr><td align="center">UCASE(str)或UPPER(str)</td><td align="center">返 回将字符串str中所有字符转变为大写后的结果</td></tr></tbody></table><h2 id="数字处理函数"><a href="#数字处理函数" class="headerlink" title="数字处理函数"></a>数字处理函数</h2><table><thead><tr><th align="center">数字处理函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ABS(x)</td><td align="center">返回x的绝对值</td></tr><tr><td align="center">BIN(x)</td><td align="center">返回x的二进制（OCT返回八进制，HEX返回十六进制）</td></tr><tr><td align="center">CEILING(x)</td><td align="center">返回大于x的最小整数值</td></tr><tr><td align="center">EXP(x)</td><td align="center">返回值e（自然对数的底）的x次方</td></tr><tr><td align="center">FLOOR(x)</td><td align="center">返回小于x的最大整数值</td></tr><tr><td align="center">GREATEST(x1,x2,…,xn)</td><td align="center">返回集合中最大的值</td></tr><tr><td align="center">LEAST(x1,x2,…,xn)</td><td align="center">返回集合中最小的值</td></tr><tr><td align="center">LN(x)</td><td align="center">返回x的自然对数</td></tr><tr><td align="center">LOG(x,y)</td><td align="center">返回x的以y为底的对数</td></tr><tr><td align="center">MOD(x,y)</td><td align="center">返回x/y的模（余数）</td></tr><tr><td align="center">PI()</td><td align="center">返回pi的值（圆周率）</td></tr><tr><td align="center">RAND()</td><td align="center">返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</td></tr><tr><td align="center">ROUND(x,y)</td><td align="center">返回参数x的四舍五入的有y位小数的值</td></tr><tr><td align="center">SIGN(x)</td><td align="center">返回代表数字x的符号的值</td></tr><tr><td align="center">SQRT(x)</td><td align="center">返回一个数的平方根</td></tr><tr><td align="center">TRUNCATE(x,y)</td><td align="center">返回数字x截短为y位小数的结果</td></tr></tbody></table><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th align="center">聚合函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AVG(X)</td><td align="center">返回指定列的平均值</td></tr><tr><td align="center">COUNT(X)</td><td align="center">返回指定列中非NULL值的个数</td></tr><tr><td align="center">MIN(X)</td><td align="center">返回指定列的最小值</td></tr><tr><td align="center">MAX(X)</td><td align="center">返回指定列的最大值</td></tr><tr><td align="center">SUM(X)</td><td align="center">返回指定列的所有值之和</td></tr><tr><td align="center">GROUP_CONCAT(X)</td><td align="center">返回由属于一组的列值连接组合而成的结果</td></tr></tbody></table><h2 id="地址转换函数"><a href="#地址转换函数" class="headerlink" title="地址转换函数"></a>地址转换函数</h2><table><thead><tr><th align="center">地址转换函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">INET_ATON(‘127.0.0.1’)</td><td align="center">将点分十进制IP地址转换成网络字节序IP地址</td></tr><tr><td align="center">INET_NTOA(2130706433)</td><td align="center">网络字节序IP转化点分十进制IP</td></tr></tbody></table><h2 id="专用窗口函数"><a href="#专用窗口函数" class="headerlink" title="专用窗口函数"></a>专用窗口函数</h2><table><thead><tr><th align="center">专用窗口函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">RANK() OVER ()</td><td align="center">如果有并列名次的行，会占用下一名次的位置</td></tr><tr><td align="center">DENSE_RANK() OVER ()</td><td align="center">如果有并列名次的行，不占用下一名次的位置</td></tr><tr><td align="center">ROW_NUMBER() OVER ()</td><td align="center">不考虑并列名次的情况</td></tr><tr><td align="center">LAG() OVER()</td><td align="center">回顾多行并从当前行访问行的数据</td></tr><tr><td align="center">LEAD() OVER()</td><td align="center">向前看多行并从当前行访问行的数据</td></tr></tbody></table><p><a href="https://zhuanlan.zhihu.com/p/92654574">https://zhuanlan.zhihu.com/p/92654574</a></p><h2 id="日期时间获取函数"><a href="#日期时间获取函数" class="headerlink" title="日期时间获取函数"></a>日期时间获取函数</h2><h3 id="获得当前日期-时间（date-time）函数"><a href="#获得当前日期-时间（date-time）函数" class="headerlink" title="获得当前日期+时间（date + time）函数"></a>获得当前日期+时间（date + time）函数</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> now();<span class="hljs-keyword">select</span> <span class="hljs-built_in">current_timestamp</span>();<span class="hljs-keyword">select</span> <span class="hljs-built_in">current_timestamp</span>;<span class="hljs-keyword">select</span> <span class="hljs-built_in">localtime</span>();<span class="hljs-keyword">select</span> <span class="hljs-built_in">localtime</span>;<span class="hljs-keyword">select</span> <span class="hljs-built_in">localtimestamp</span>;<span class="hljs-keyword">select</span> <span class="hljs-built_in">localtimestamp</span>();<span class="hljs-keyword">select</span> sysdate();<span class="hljs-comment">--  now() 在执行开始时值就得到</span><span class="hljs-comment">--  sysdate() 在函数执行时动态得到值 一般情况下很少用到</span></code></pre></div><h3 id="获得当前日期（date）函数"><a href="#获得当前日期（date）函数" class="headerlink" title="获得当前日期（date）函数"></a>获得当前日期（date）函数</h3> <div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> curdate();<span class="hljs-keyword">select</span> <span class="hljs-built_in">current_date</span>();<span class="hljs-keyword">select</span> <span class="hljs-built_in">current_date</span>;</code></pre></div><h3 id="获得当前时间（time）函数"><a href="#获得当前时间（time）函数" class="headerlink" title="获得当前时间（time）函数"></a>获得当前时间（time）函数</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> curtime();<span class="hljs-keyword">select</span> <span class="hljs-built_in">current_time</span>();<span class="hljs-keyword">select</span> <span class="hljs-built_in">current_time</span>;</code></pre></div><h3 id="获得当前-UTC-日期时间函数"><a href="#获得当前-UTC-日期时间函数" class="headerlink" title="获得当前 UTC 日期时间函数"></a>获得当前 UTC 日期时间函数</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> utc_timestamp();<span class="hljs-comment">-- utc日期（date）函数</span><span class="hljs-keyword">select</span> utc_date();<span class="hljs-comment">-- utc时间（time）函数</span><span class="hljs-keyword">select</span> utc_time();</code></pre></div><h3 id="MySQL-日期时间选取函数"><a href="#MySQL-日期时间选取函数" class="headerlink" title="MySQL 日期时间选取函数"></a>MySQL 日期时间选取函数</h3><h4 id="获得日期时间的各个部分：日期、时间、年、季度、月、日、小时、分钟、秒、微秒"><a href="#获得日期时间的各个部分：日期、时间、年、季度、月、日、小时、分钟、秒、微秒" class="headerlink" title="获得日期时间的各个部分：日期、时间、年、季度、月、日、小时、分钟、秒、微秒"></a>获得日期时间的各个部分：日期、时间、年、季度、月、日、小时、分钟、秒、微秒</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span><span class="hljs-variable">@date</span> <span class="hljs-operator">=</span> now();<span class="hljs-keyword">select</span> <span class="hljs-type">date</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--date</span><span class="hljs-keyword">select</span> <span class="hljs-type">time</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--time       </span><span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--年       </span><span class="hljs-keyword">select</span> quarter(<span class="hljs-variable">@date</span>); <span class="hljs-comment">--季度    </span><span class="hljs-keyword">select</span> <span class="hljs-keyword">month</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--月      </span><span class="hljs-keyword">select</span> week(<span class="hljs-variable">@date</span>); <span class="hljs-comment">--周     </span><span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--天       </span><span class="hljs-keyword">select</span> <span class="hljs-keyword">hour</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--小时       </span><span class="hljs-keyword">select</span> <span class="hljs-keyword">minute</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--分钟     </span><span class="hljs-keyword">select</span> <span class="hljs-keyword">second</span> (<span class="hljs-variable">@date</span>); <span class="hljs-comment">--秒     </span><span class="hljs-keyword">select</span> microsecond(<span class="hljs-variable">@date</span>); <span class="hljs-comment">--微秒 </span><span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">year</span> <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(quarter <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">month</span> <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(week <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">day</span> <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">hour</span> <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">minute</span> <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">second</span> <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(microsecond <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(year_month <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(day_hour <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(day_minute <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(day_second <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(day_microsecond <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(hour_minute <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(hour_second <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(hour_microsecond <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(minute_second <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(minute_microsecond <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(second_microsecond <span class="hljs-keyword">from</span> <span class="hljs-variable">@date</span>);</code></pre></div><h4 id="获得日期参数，在一周、一月、一年中第几天"><a href="#获得日期参数，在一周、一月、一年中第几天" class="headerlink" title="获得日期参数，在一周、一月、一年中第几天"></a>获得日期参数，在一周、一月、一年中第几天</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span><span class="hljs-variable">@date</span> <span class="hljs-operator">=</span> now();<span class="hljs-keyword">select</span> dayofweek(<span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> dayofmonth(<span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> dayofyear(<span class="hljs-variable">@date</span>);<span class="hljs-comment">-- 是一周中的第n天（1 = Sunday, 2 = Monday, …, 7 = Saturday）；</span><span class="hljs-comment">-- 一月中的第n天；一年中的第n天。</span></code></pre></div><h4 id="获得日期参数，在一周、一月、一年中第几周"><a href="#获得日期参数，在一周、一月、一年中第几周" class="headerlink" title="获得日期参数，在一周、一月、一年中第几周"></a>获得日期参数，在一周、一月、一年中第几周</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span><span class="hljs-variable">@date</span> <span class="hljs-operator">=</span> now();<span class="hljs-keyword">select</span> week(<span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> week(<span class="hljs-variable">@date</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">-- weekofyear(@date) 等价于 week(@date,3)</span><span class="hljs-keyword">select</span> weekofyear(<span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> dayofweek(<span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> weekday(<span class="hljs-variable">@date</span>);<span class="hljs-keyword">select</span> yearweek(<span class="hljs-variable">@date</span>);weekday：(<span class="hljs-number">0</span> <span class="hljs-operator">=</span> Monday, <span class="hljs-number">1</span> <span class="hljs-operator">=</span> Tuesday,…, <span class="hljs-number">6</span> <span class="hljs-operator">=</span> Sunday);dayofweek：（<span class="hljs-number">1</span><span class="hljs-operator">=</span> Sunday, <span class="hljs-number">2</span> <span class="hljs-operator">=</span> Monday,…, <span class="hljs-number">7</span> <span class="hljs-operator">=</span> Saturday);</code></pre></div><ul><li>week(date, mode)<ul><li>date是要获取周数的日期。</li><li>mode是一个可选参数，用于确定周数计算的逻辑。它允许您指定本周是从星期一还是星期日开始，返回的周数应在0到52之间或0到53之间</li><li>0 星期天 0-53 遇到本年的第一个星期天开始，是第一周。前面的计算为第0周。</li><li>1 星期一 0-53 假如第一周能超过3天，那么计算为本年的第一周。否则为第0周</li><li>2 星期天 1-53 遇到本年的第一个星期天开始，是第一周。 前面的计算为上年度的第5x周。</li><li>3 星期一 1-53 假如第一周能超过3天，那么计算为本年的第一周。否则为上年度的第5x周。</li><li>4 星期天 0-53 假如第一周能超过3天，那么计算为本年的第一周。否则为第0周</li><li>5 星期一 0-53 遇到本年的第一个星期一开始，是第一周。 前面的计算为第0周。</li><li>6 星期天 1-53 假如第一周能超过3天，那么计算为本年的第一周。否则为上年度的第5x周。</li><li>7 星期一 1-53 遇到本年的第一个星期一开始，是第一周。 前面的计算为上年度的第5x周。</li></ul></li></ul><h4 id="获得星期和月份名称函数：dayname-monthname"><a href="#获得星期和月份名称函数：dayname-monthname" class="headerlink" title="获得星期和月份名称函数：dayname(), monthname()"></a>获得星期和月份名称函数：dayname(), monthname()</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span><span class="hljs-variable">@date</span> <span class="hljs-operator">=</span> now();<span class="hljs-keyword">select</span> dayname();<span class="hljs-keyword">select</span> monthname();<span class="hljs-comment">-- 可以设置语言</span><span class="hljs-keyword">set</span>lc_time_names<span class="hljs-operator">=</span><span class="hljs-string">&#x27;en_GB&#x27;</span>;  <span class="hljs-comment">--英文</span><span class="hljs-keyword">set</span>lc_time_names<span class="hljs-operator">=</span><span class="hljs-string">&#x27;zh_CN&#x27;</span>;  <span class="hljs-comment">--中文</span></code></pre></div><p>区域设置值 <a href="https://dev.mysql.com/doc/refman/8.0/en/locale-support.html">https://dev.mysql.com/doc/refman/8.0/en/locale-support.html</a></p><h4 id="获得月份中的最后一天-last-day"><a href="#获得月份中的最后一天-last-day" class="headerlink" title="获得月份中的最后一天 : last_day()"></a>获得月份中的最后一天 : last_day()</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> last_day(curdate());<span class="hljs-comment">-- 当前月份中有多少天</span><span class="hljs-keyword">select</span> curdate(), <span class="hljs-keyword">day</span> (last_day(curdate())) <span class="hljs-keyword">as</span> days;</code></pre></div><h3 id="MySQL-日期时间计算函数"><a href="#MySQL-日期时间计算函数" class="headerlink" title="MySQL 日期时间计算函数"></a>MySQL 日期时间计算函数</h3><h4 id="为日期增加一个时间间隔：date-add"><a href="#为日期增加一个时间间隔：date-add" class="headerlink" title="为日期增加一个时间间隔：date_add()"></a>为日期增加一个时间间隔：date_add()</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span><span class="hljs-variable">@date</span> <span class="hljs-operator">=</span> now();<span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">day</span>);<span class="hljs-comment">-- 间隔单位：天</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">hour</span>);<span class="hljs-comment">-- 间隔单位：小时</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">minute</span>);<span class="hljs-comment">-- 间隔单位：分钟</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">second</span>);<span class="hljs-comment">-- 间隔单位：秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> microsecond);<span class="hljs-comment">--间隔单位：毫秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> week);<span class="hljs-comment">-- 间隔单位：星期</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">month</span>);<span class="hljs-comment">-- 间隔单位：月</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> quarter);<span class="hljs-comment">-- 间隔单位：季度</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">year</span>);<span class="hljs-comment">-- 间隔单位：年</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">day</span>);<span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> SECOND_MICROSECOND);<span class="hljs-comment">-- 复合型，间隔单位：秒、毫秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> MINUTE_MICROSECOND);<span class="hljs-comment">-- 复合型，间隔单位：分、毫秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> MINUTE_SECOND);<span class="hljs-comment">-- 复合型，间隔单位：分、秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> HOUR_MICROSECOND);<span class="hljs-comment">-- 复合型，间隔单位：小时、毫秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> HOUR_SECOND);<span class="hljs-comment">-- 复合型，间隔单位：小时、秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> HOUR_MINUTE);<span class="hljs-comment">-- 复合型，间隔单位：小时分</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> DAY_MICROSECOND);<span class="hljs-comment">-- 复合型，间隔单位：天、毫秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> DAY_SECOND);<span class="hljs-comment">-- 复合型，间隔单位：天、秒</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> DAY_MINUTE);<span class="hljs-comment">-- 复合型，间隔单位：天、分</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> DAY_HOUR);<span class="hljs-comment">-- 复合型，间隔单位：天、小时</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-variable">@date</span>, <span class="hljs-type">interval</span> <span class="hljs-string">&#x27;1 1&#x27;</span> YEAR_MONTH);<span class="hljs-comment">-- 复合型，间隔单位：年、月</span></code></pre></div><p>建议：使用 date_add() 日期时间函数来替代 adddate(), addtime()</p><h4 id="为日期减去一个时间间隔：date-sub"><a href="#为日期减去一个时间间隔：date-sub" class="headerlink" title="为日期减去一个时间间隔：date_sub()"></a>为日期减去一个时间间隔：date_sub()</h4><p>date_sub() 日期时间函数 和 date_add() 用法一致</p><p>建议：使用 date_sub() 日期时间函数来替代 subdate(), subtime()</p><h4 id="另类日期函数：period-add-P-N-period-diff-P1-P2"><a href="#另类日期函数：period-add-P-N-period-diff-P1-P2" class="headerlink" title="另类日期函数：period_add(P,N), period_diff(P1,P2)"></a>另类日期函数：period_add(P,N), period_diff(P1,P2)</h4><p>P 的格式为YYYYMM或者 YYMM，第二个参数N 表示增加或减去 N month（月）。</p><p>period_add(P,N)：日期加/减去N月。</p><p>period_diff(P1,P2)：日期 P1-P2，返回 N 个月。</p><h4 id="日期、时间相减函数：datediff-date1-date2-timediff-time1-time2"><a href="#日期、时间相减函数：datediff-date1-date2-timediff-time1-time2" class="headerlink" title="日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)"></a>日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</h4><p>两个日期相减 date1 - date2，返回天数</p><p>两个日期相减 time1 - time2，返回 time 差值</p><p>注意：timediff(time1,time2) 函数的两个参数类型必须相同。</p><h3 id="MySQL-日期时间转换函数"><a href="#MySQL-日期时间转换函数" class="headerlink" title="MySQL 日期时间转换函数"></a>MySQL 日期时间转换函数</h3><h4 id="时间、秒转换函数：time-to-sec-time-sec-to-time-seconds"><a href="#时间、秒转换函数：time-to-sec-time-sec-to-time-seconds" class="headerlink" title="时间、秒转换函数：time_to_sec(time), sec_to_time(seconds)"></a>时间、秒转换函数：time_to_sec(time), sec_to_time(seconds)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> time_to_sec(<span class="hljs-string">&#x27;01:00:00&#x27;</span>);<span class="hljs-keyword">select</span> sec_to_time(<span class="hljs-number">3600</span>);</code></pre></div><h4 id="日期、天数转换函数：to-days-date-from-days-days"><a href="#日期、天数转换函数：to-days-date-from-days-days" class="headerlink" title="日期、天数转换函数：to_days(date), from_days(days)"></a>日期、天数转换函数：to_days(date), from_days(days)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> to_days(CURDATE());<span class="hljs-keyword">select</span> from_days(<span class="hljs-number">738616</span>);</code></pre></div><h4 id="字符串转换为日期函数：str-to-date-str-format"><a href="#字符串转换为日期函数：str-to-date-str-format" class="headerlink" title="字符串转换为日期函数：str_to_date(str, format)"></a>字符串转换为日期函数：str_to_date(str, format)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> str_to_date(<span class="hljs-string">&#x27;01/01/2022&#x27;</span>, <span class="hljs-string">&#x27;%d/%m/%Y&#x27;</span>);<span class="hljs-keyword">select</span> str_to_date(<span class="hljs-string">&#x27;01/01/20&#x27;</span>, <span class="hljs-string">&#x27;%d/%m/%y&#x27;</span>);<span class="hljs-keyword">select</span> str_to_date(<span class="hljs-string">&#x27;01.01.2022&#x27;</span>, <span class="hljs-string">&#x27;%d.%m.%Y&#x27;</span>);<span class="hljs-comment">-- 此处要注意sql_mode模式 NO_ZERO_DATE NO_ZERO_IN_DATE 为关闭情况</span><span class="hljs-keyword">select</span> str_to_date(<span class="hljs-string">&#x27;12:00:00&#x27;</span>, <span class="hljs-string">&#x27;%H:%i:%s&#x27;</span>);<span class="hljs-keyword">select</span> str_to_date(<span class="hljs-string">&#x27;01.01.2022 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;%d.%m.%Y %H:%i:%s&#x27;</span>);</code></pre></div><h4 id="日期-时间转换为字符串函数：date-format-date-format-time-format-time-format"><a href="#日期-时间转换为字符串函数：date-format-date-format-time-format-time-format" class="headerlink" title="日期/时间转换为字符串函数：date_format(date,format), time_format(time,format)"></a>日期/时间转换为字符串函数：date_format(date,format), time_format(time,format)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> date_format(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;%W %M %Y&#x27;</span>);<span class="hljs-keyword">select</span> date_format(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;%Y%m%d%H%i%s&#x27;</span>);<span class="hljs-keyword">select</span> date_format(<span class="hljs-string">&#x27;12:00:00&#x27;</span>, <span class="hljs-string">&#x27;%H.%i.%s&#x27;</span>);</code></pre></div><table><thead><tr><th>格式标识符</th><th>说明</th></tr></thead><tbody><tr><td>%a</td><td>缩写星期名</td></tr><tr><td>%b</td><td>缩写月名</td></tr><tr><td>%c</td><td>月，数值</td></tr><tr><td>%D</td><td>带有英文前缀的月中的天</td></tr><tr><td>%d</td><td>月的天，数值(00-31)</td></tr><tr><td>%e</td><td>月的天，数值(0-31)</td></tr><tr><td>%f</td><td>微秒</td></tr><tr><td>%H</td><td>小时 (00-23)</td></tr><tr><td>%h</td><td>小时 (01-12)</td></tr><tr><td>%I</td><td>小时 (01-12)</td></tr><tr><td>%i</td><td>分钟，数值(00-59)</td></tr><tr><td>%j</td><td>年的天 (001-366)</td></tr><tr><td>%k</td><td>小时 (0-23)</td></tr><tr><td>%l</td><td>小时 (1-12)</td></tr><tr><td>%M</td><td>月名</td></tr><tr><td>%m</td><td>月，数值(00-12)</td></tr><tr><td>%p</td><td>AM 或 PM</td></tr><tr><td>%r</td><td>时间，12-小时（hh:mm:ss AM 或 PM）</td></tr><tr><td>%S</td><td>秒(00-59)</td></tr><tr><td>%s</td><td>秒(00-59)</td></tr><tr><td>%T</td><td>时间, 24-小时 (hh:mm:ss)</td></tr><tr><td>%U</td><td>周 (00-53) 星期日是一周的第一天</td></tr><tr><td>%u</td><td>周 (00-53) 星期一是一周的第一天</td></tr><tr><td>%V</td><td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td></tr><tr><td>%v</td><td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td></tr><tr><td>%W</td><td>星期名</td></tr><tr><td>%w</td><td>周的天 （0=星期日, 6=星期六）</td></tr><tr><td>%X</td><td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td></tr><tr><td>%x</td><td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td></tr><tr><td>%Y</td><td>年，4 位</td></tr><tr><td>%y</td><td>年，2 位</td></tr></tbody></table><h4 id="拼凑日期、时间函数：makdedate-year-dayofyear-maketime-hour-minute-second"><a href="#拼凑日期、时间函数：makdedate-year-dayofyear-maketime-hour-minute-second" class="headerlink" title="拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)"></a>拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> makedate(<span class="hljs-number">2022</span>, <span class="hljs-number">31</span>);<span class="hljs-keyword">select</span> makedate(<span class="hljs-number">2022</span>, <span class="hljs-number">32</span>);<span class="hljs-keyword">select</span> maketime(<span class="hljs-number">12</span>, <span class="hljs-number">00</span>, <span class="hljs-number">00</span>);</code></pre></div><h3 id="MySQL-时间戳函数"><a href="#MySQL-时间戳函数" class="headerlink" title="MySQL 时间戳函数"></a>MySQL 时间戳函数</h3><h4 id="获得当前时间戳函数：current-timestamp-current-timestamp"><a href="#获得当前时间戳函数：current-timestamp-current-timestamp" class="headerlink" title="获得当前时间戳函数：current_timestamp, current_timestamp()"></a>获得当前时间戳函数：current_timestamp, current_timestamp()</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_timestamp</span>, <span class="hljs-built_in">current_timestamp</span>();</code></pre></div><h4 id="Unix-时间戳、日期转换函数："><a href="#Unix-时间戳、日期转换函数：" class="headerlink" title="Unix 时间戳、日期转换函数："></a>Unix 时间戳、日期转换函数：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> unix_timestamp();<span class="hljs-keyword">select</span> unix_timestamp(<span class="hljs-string">&#x27;2022-01-01&#x27;</span>);<span class="hljs-keyword">select</span> unix_timestamp(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>);<span class="hljs-keyword">select</span> from_unixtime(<span class="hljs-number">1641009600</span>);<span class="hljs-keyword">select</span> from_unixtime(<span class="hljs-number">1641009600</span>, <span class="hljs-string">&#x27;%Y %d %m %H:%i:%s&#x27;</span>);</code></pre></div><h4 id="时间戳（timestamp）转换、增、减函数："><a href="#时间戳（timestamp）转换、增、减函数：" class="headerlink" title="时间戳（timestamp）转换、增、减函数："></a>时间戳（timestamp）转换、增、减函数：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-type">timestamp</span> (<span class="hljs-string">&#x27;2022-01-01&#x27;</span>);<span class="hljs-keyword">select</span> <span class="hljs-type">timestamp</span> (<span class="hljs-string">&#x27;2022-01-01 08:00:00&#x27;</span>, <span class="hljs-string">&#x27;01:01:01&#x27;</span>);<span class="hljs-keyword">select</span> <span class="hljs-type">timestamp</span> (<span class="hljs-string">&#x27;2022-01-01 08:00:00&#x27;</span>, <span class="hljs-string">&#x27;10 01:01:01&#x27;</span>);<span class="hljs-keyword">select</span> timestampadd(<span class="hljs-keyword">day</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2022-01-01 08:00:00&#x27;</span>);<span class="hljs-keyword">select</span> date_add(<span class="hljs-string">&#x27;2022-01-01 08:00:00&#x27;</span>, <span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">day</span>);<span class="hljs-keyword">select</span> timestampdiff(<span class="hljs-keyword">year</span>,<span class="hljs-string">&#x27;2022-01-01&#x27;</span>, <span class="hljs-string">&#x27;2021-01-01&#x27;</span>);<span class="hljs-keyword">select</span> timestampdiff(<span class="hljs-keyword">day</span> ,<span class="hljs-string">&#x27;2022-01-01&#x27;</span>, <span class="hljs-string">&#x27;2022-01-02&#x27;</span>);<span class="hljs-keyword">select</span> timestampdiff(<span class="hljs-keyword">hour</span>,<span class="hljs-string">&#x27;2022-01-01 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;2022-01-01 08:00:00&#x27;</span>);<span class="hljs-keyword">select</span> datediff(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;2022-01-01 00:00:00&#x27;</span>);</code></pre></div><h4 id="时区（timezone）转换函数"><a href="#时区（timezone）转换函数" class="headerlink" title="时区（timezone）转换函数"></a>时区（timezone）转换函数</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> convert_tz(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;+08:00&#x27;</span>, <span class="hljs-string">&#x27;+00:00&#x27;</span>);<span class="hljs-comment">-- 时区转换也可以通过 date_add, date_sub, timestampadd 来实现。</span><span class="hljs-keyword">select</span> date_add(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>, <span class="hljs-type">interval</span> <span class="hljs-number">-8</span> <span class="hljs-keyword">hour</span>);<span class="hljs-keyword">select</span> date_sub(<span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>, <span class="hljs-type">interval</span> <span class="hljs-number">8</span> <span class="hljs-keyword">hour</span>);<span class="hljs-keyword">select</span> timestampadd(<span class="hljs-keyword">hour</span>, <span class="hljs-number">-8</span>, <span class="hljs-string">&#x27;2022-01-01 12:00:00&#x27;</span>);</code></pre></div><h1 id="1-数据查询"><a href="#1-数据查询" class="headerlink" title="1. 数据查询"></a>1. 数据查询</h1><p><strong>SELECT</strong>: 用于从数据库中选择数据</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1<span class="hljs-keyword">FROM</span> table_name;<span class="hljs-keyword">SELECT</span> column1, column2 <span class="hljs-keyword">as</span> c2<span class="hljs-keyword">FROM</span> table_name;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name;</code></pre></div><p><strong>DISTINCT</strong>: 用于过滤掉重复的值并返回指定列的行</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> column_name<span class="hljs-keyword">FROM</span> table_name;</code></pre></div><p><strong>WHERE</strong>: 用于过滤记录/行</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> condition1  <span class="hljs-keyword">AND</span> condition2;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> condition1   <span class="hljs-keyword">OR</span> condition2;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">condition</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> condition1  <span class="hljs-keyword">AND</span> (condition2 <span class="hljs-keyword">OR</span> condition3);<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span>(<span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>);</code></pre></div><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">!&lt;</td><td align="center">不小于</td></tr><tr><td align="center">!&gt;</td><td align="center">不大于</td></tr><tr><td align="center">BETWEEN END</td><td align="center">在指定值之间</td></tr><tr><td align="center">IS NULL</td><td align="center">为null</td></tr></tbody></table><p><strong>ORDER BY</strong>: 用于结果集的排序，升序（ASC）或者降序（DESC）</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">column</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">DESC</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column1 <span class="hljs-keyword">ASC</span>, column2 <span class="hljs-keyword">DESC</span>;</code></pre></div><p><strong>SELECT TOP</strong>: 用于指定从表顶部返回的记录数</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> TOP number columns_names<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-keyword">percent</span> columns_names<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;</code></pre></div><p>并非所有数据库系统都支持SELECT TOP。 <strong>MySQL</strong> 中是LIMIT子句</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table_name LIMIT<span class="hljs-keyword">offset</span>, count;</code></pre></div><p><strong>LIKE</strong>: 用于搜索列中的特定模式，WHERE 子句中使用的运算符<br><code>%</code> (percent sign) 是一个表示零个，一个或多个字符的通配符<br><code>_</code> (underscore) 是一个表示单个字符通配符</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">LIKE</span> <span class="hljs-keyword">pattern</span>;<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;a%&#x27;</span>（查找任何以“a”开头的值）<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a&#x27;</span>（查找任何以“a”结尾的值）<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%or%&#x27;</span>（查找任何包含“<span class="hljs-keyword">or</span>”的值）<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_r%&#x27;</span>（查找任何第二位是“r”的值）<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;a_%_%&#x27;</span>（查找任何以“a”开头且长度至少为<span class="hljs-number">3</span>的值）<span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;[a-c]%&#x27;</span>（查找任何以“a”或“b”或“c”开头的值）</code></pre></div><p><strong>IN</strong>: 用于在 WHERE 子句中指定多个值的运算符</p><ul><li>本质上，IN运算符是多个OR条件的简写</li></ul><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">IN</span> (value1, value2, …);<span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> STATEMENT);</code></pre></div><p><strong>BETWEEN</strong>: 用于过滤给定范围的值的运算符</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">BETWEEN</span> value1 <span class="hljs-keyword">AND</span> value2;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> (column_name <span class="hljs-keyword">BETWEEN</span> value1 <span class="hljs-keyword">AND</span> value2)  <span class="hljs-keyword">AND</span> <span class="hljs-keyword">NOT</span> column_name2 <span class="hljs-keyword">IN</span> (value3, value4);<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">BETWEEN</span> #<span class="hljs-number">01</span> <span class="hljs-operator">/</span> <span class="hljs-number">07</span> <span class="hljs-operator">/</span> <span class="hljs-number">1999</span># <span class="hljs-keyword">AND</span> #<span class="hljs-number">03</span> <span class="hljs-operator">/</span> <span class="hljs-number">12</span> <span class="hljs-operator">/</span> <span class="hljs-number">1999</span>#;</code></pre></div><p><strong>NULL</strong>: 代表一个字段没有值</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;</code></pre></div><p><strong>AS</strong>: 用于给表或者列分配别名</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">AS</span> alias_name<span class="hljs-keyword">FROM</span> table_name;<span class="hljs-keyword">SELECT</span> column_name<span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">AS</span> alias_name;<span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">AS</span> alias_name1, column_name2 <span class="hljs-keyword">AS</span> alias_name2;<span class="hljs-keyword">SELECT</span> column_name1, column_name2 <span class="hljs-operator">+</span> ‘, ‘ <span class="hljs-operator">+</span> column_name3 <span class="hljs-keyword">AS</span> alias_name;</code></pre></div><p><strong>UNION</strong>: 用于组合两个或者多个 SELECT 语句的结果集的运算符</p><ul><li>每个 SELECT 语句必须拥有相同的列数</li><li>列必须拥有相似的数据类型</li><li>每个 SELECT 语句中的列也必须具有相同的顺序</li></ul><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns_names<span class="hljs-keyword">FROM</span> table1<span class="hljs-keyword">UNION</span><span class="hljs-keyword">SELECT</span> column_name<span class="hljs-keyword">FROM</span> table2;<span class="hljs-keyword">UNION</span> 仅允许选择不同的值, <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> 允许重复</code></pre></div><p><strong>ANY|ALL</strong>: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符</p><ul><li>ANY 如果任何子查询值满足条件，则返回 true。</li><li>ALL 如果所有子查询值都满足条件，则返回 true。</li></ul><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns_names<span class="hljs-keyword">FROM</span> table1<span class="hljs-keyword">WHERE</span> column_name operator (<span class="hljs-keyword">ANY</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>) (<span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>);</code></pre></div><p><strong>GROUP BY</strong>: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name1, <span class="hljs-built_in">COUNT</span>(column_name2)<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name1<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(column_name2) <span class="hljs-keyword">DESC</span>;</code></pre></div><p><strong>HAVING</strong>: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(column_name1), column_name2<span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name2<span class="hljs-keyword">HAVING</span> ``<span class="hljs-built_in">COUNT</span>(column_name1) <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>;</code></pre></div><h1 id="2-数据操作"><a href="#2-数据操作" class="headerlink" title="2. 数据操作"></a>2. 数据操作</h1><p><strong>INSERT INTO</strong>: 用于在表中插入新记录/行</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (column1, column2)<span class="hljs-keyword">VALUES</span> (value1, value2);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name<span class="hljs-keyword">VALUES</span> (value1, value2 …);</code></pre></div><p><strong>UPDATE</strong>: 用于修改表中的现有记录/行</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table_name<span class="hljs-keyword">SET</span> column1 <span class="hljs-operator">=</span> value1,    column2 <span class="hljs-operator">=</span> value2<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<span class="hljs-keyword">UPDATE</span> table_name<span class="hljs-keyword">SET</span> column_name <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span>;</code></pre></div><p><strong>DELETE</strong>: 用于删除表中的现有记录/行</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span><span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<span class="hljs-keyword">DELETE</span><span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name;</code></pre></div><p><strong>TRUNCATE</strong> : 用于删除表中的现有记录</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> table_name;</code></pre></div><h1 id="3-聚合查询"><a href="#3-聚合查询" class="headerlink" title="3. 聚合查询"></a>3. 聚合查询</h1><p><strong>COUNT</strong>: 返回出现次数</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> column_name);</code></pre></div><p><strong>MIN() and MAX()</strong>: 返回所选列的最小/最大值</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(column_names)<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(column_names)<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;</code></pre></div><p><strong>AVG()</strong>: 返回数字列的平均值</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(column_name)<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;</code></pre></div><p><strong>SUM()</strong>: 返回数值列的总和</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(column_name)<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;</code></pre></div><h1 id="4-连接查询"><a href="#4-连接查询" class="headerlink" title="4. 连接查询"></a>4. 连接查询</h1><p><strong>INNER JOIN</strong>: 内连接，返回在两张表中具有匹配值的记录</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table1         <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table2                    <span class="hljs-keyword">ON</span> table1.column_name <span class="hljs-operator">=</span> table2.column_name;<span class="hljs-keyword">SELECT</span> table1.column_name1, table2.column_name2, table3.column_name3<span class="hljs-keyword">FROM</span> ((table1 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table2 ONrelationship)         <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table3 <span class="hljs-keyword">ON</span> relationship);</code></pre></div><p><strong>LEFT (OUTER) JOIN</strong>: 左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table1         <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>     table2 <span class="hljs-keyword">ON</span> table1.column_name <span class="hljs-operator">=</span> table2.column_name;</code></pre></div><p><strong>RIGHT (OUTER) JOIN</strong>: 右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table1         <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span>     table2 <span class="hljs-keyword">ON</span> table1.column_name <span class="hljs-operator">=</span> table2.column_name;</code></pre></div><p><strong>FULL (OUTER) JOIN</strong>: 全外连接，全连接是左右外连接的并集. 连接表包含被连接的表的所有记录, 如果缺少匹配的记录, 以 NULL 填充。</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table1         <span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span>     table2 <span class="hljs-keyword">ON</span> table1.column_name <span class="hljs-operator">=</span> table2.column_name;</code></pre></div><p><strong>Self JOIN</strong>: 自连接，表自身连接</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_names<span class="hljs-keyword">FROM</span> table1 T1,     table1 T2<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;</code></pre></div><h1 id="5-视图查询"><a href="#5-视图查询" class="headerlink" title="5. 视图查询"></a>5. 视图查询</h1><p><strong>CREATE</strong>: 创建视图</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name <span class="hljs-keyword">AS</span><span class="hljs-keyword">SELECT</span> column1, column2<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;</code></pre></div><p><strong>SELECT</strong>: 检索视图</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> view_name;</code></pre></div><p><strong>DROP</strong>: 删除视图</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_name;</code></pre></div><h1 id="6-修改"><a href="#6-修改" class="headerlink" title="6. 修改"></a>6. 修改</h1><p><strong>ADD</strong>: 添加字段</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name    <span class="hljs-keyword">ADD</span> column_name column_definition;</code></pre></div><p><strong>MODIFY</strong>: 修改字段数据类型</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name MODIFY column_name column_type;</code></pre></div><p><strong>DROP</strong>: 删除字段</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> column_name;</code></pre></div><h1 id="7-完整性约束"><a href="#7-完整性约束" class="headerlink" title="7.完整性约束"></a>7.完整性约束</h1><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名    <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (主键字段);</code></pre></div><h2 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 主键字段 <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 主键字段 主键字段 <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT;</code></pre></div><h2 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> KEY 字段;</code></pre></div><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段 <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 字段 字段 <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;</code></pre></div><h2 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名    <span class="hljs-keyword">ALTER</span> 字段名 <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;</code></pre></div><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名    <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键别名 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段) <span class="hljs-keyword">REFERENCES</span> 父表 (主键字段);</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术书籍</title>
    <link href="/2022/04/04/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D/"/>
    <url>/2022/04/04/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>版权相关注意事项：</strong></p><div><p class="note note-danger">书籍版权归著者和出版社所有<br>资源来自于各个广泛的信息平台 如侵权请联系删除 邮箱admin@ocrud.com<br>仅限用于非商业用途或者个人交流研究学习使用 任何组织和个人不得下载传播或用于任何商业盈利用途<br>获得者不得在互联网上以任何目的进行传播，否则一切后果由该组织或个人承担,本站和制作者不承担任何法律及连带责任<br>如果觉得书籍内容很赞，请一定购买正版实体书，多多支持编写高质量的图书的作者和相应的出版社<br>技术类书籍是拿来获取知识的，不是拿来收藏的，你得到了书籍不意味着你得到了知识</p><br><div><a class="btn" href="https://github.com/itdevbooks/pdf" title="1500多本计算机电子书">1500多本计算机电子书</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E5%B5%A9%E5%B1%B1%E7%89%88.pdf" title="Java开发手册">Java开发手册</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E7%81%B5%E9%AD%8213%E9%97%AE.pdf" title="Java开发手册灵魂13问">Java开发手册灵魂13问</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E7%81%B5%E9%AD%8215%E9%97%AE.pdf" title="Java开发手册灵魂15问">Java开发手册灵魂15问</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E7%81%B5%E9%AD%8217%E9%97%AE.pdf" title="Java开发手册灵魂17问">Java开发手册灵魂17问</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/%E6%B7%B1%E5%85%A5MySQL%E5%AE%9E%E6%88%98.pdf" title="深入MySQL实战">深入MySQL实战</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/%E7%AC%94%E8%AF%95%E7%B2%BE%E8%A7%A3%E5%90%88%E9%9B%86.pdf" title="笔试精解合集">笔试精解合集</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA.pdf" title="深入理解Java虚拟机">深入理解Java虚拟机</a><a class="btn" href="https://ocrud.com/doc/web/viewer.html?file=https://cdn.ocrud.com/pdf/%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98.pdf" title="对线面试官">对线面试官</a></div>]]></content>
    
    
    <categories>
      
      <category>book</category>
      
    </categories>
    
    
    <tags>
      
      <tag>book</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2021/09/30/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/09/30/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><h2 id="下载并安装程序与基础环境"><a href="#下载并安装程序与基础环境" class="headerlink" title="下载并安装程序与基础环境"></a>下载并安装程序与基础环境</h2><a class="btn" href="https://nodejs.org/en/"  title="Git下载地址" target="_blank">Git下载地址</a><a class="btn" href="https://git-scm.com/"  title="Node.js载地址" target="_blank">Node.js载地址</a><h2 id="运行-Git-Bash-并切换淘宝镜像-提高下载速度"><a href="#运行-Git-Bash-并切换淘宝镜像-提高下载速度" class="headerlink" title="运行 Git Bash 并切换淘宝镜像 (提高下载速度)"></a>运行 Git Bash 并切换淘宝镜像 (提高下载速度)</h2><p>全局切换命令：</p><div class="code-wrapper"><pre><code class="hljs shell">npm config set registry http://registry.npm.taobao.org/</code></pre></div><p>查看版本命令：</p><div class="code-wrapper"><pre><code class="hljs shell">npm get registry</code></pre></div><p>切回官方镜像命令：</p><div class="code-wrapper"><pre><code class="hljs shell">npm config set registry http://www.npmjs.org</code></pre></div><h2 id="安装全局hexo依赖"><a href="#安装全局hexo依赖" class="headerlink" title="安装全局hexo依赖"></a>安装全局hexo依赖</h2><p>运行命令：</p><div class="code-wrapper"><pre><code class="hljs shell">npm install -g hexo</code></pre></div><p>查看版本：</p><div class="code-wrapper"><pre><code class="hljs shell">hexo v</code></pre></div><h2 id="创建-hexo-文件夹"><a href="#创建-hexo-文件夹" class="headerlink" title="创建 hexo 文件夹"></a>创建 hexo 文件夹</h2><p>请在指定路径新建文件夹（英文名），右键空白处，选择 Git Bash here，输入指令：</p><div class="code-wrapper"><pre><code class="hljs shell">hexo init</code></pre></div><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>安装你喜欢的主题  打开安装文件夹下_config.yml 文件，修改 theme 后面的名字为你刚才安装的主题</p><h2 id="清除-hexo"><a href="#清除-hexo" class="headerlink" title="清除 hexo"></a>清除 hexo</h2><div class="code-wrapper"><pre><code class="hljs shell">hexo clean</code></pre></div><h2 id="部署-hexo"><a href="#部署-hexo" class="headerlink" title="部署 hexo"></a>部署 hexo</h2><div class="code-wrapper"><pre><code class="hljs shell">hexo g</code></pre></div><h2 id="启动-hexo-本地化预览"><a href="#启动-hexo-本地化预览" class="headerlink" title="启动 hexo 本地化预览"></a>启动 hexo 本地化预览</h2><div class="code-wrapper"><pre><code class="hljs shell">hexo s</code></pre></div><h2 id="hexo-git推送"><a href="#hexo-git推送" class="headerlink" title="hexo git推送"></a>hexo git推送</h2><div class="code-wrapper"><pre><code class="hljs shell">hexo d</code></pre></div><h1 id="Linux服务器部署方式"><a href="#Linux服务器部署方式" class="headerlink" title="Linux服务器部署方式"></a>Linux服务器部署方式</h1><h2 id="nginx-yum安装"><a href="#nginx-yum安装" class="headerlink" title="nginx yum安装"></a>nginx yum安装</h2><div class="code-wrapper"><pre><code class="hljs shell">yum -y install epel-release yum -y install nginxnginx默认基础文件地址 /etc/nginx/html默认存放地址 /usr/share/nginx/html/</code></pre></div><p>hexo g 命令后把静态文件存放即可</p><h2 id="centos关闭防火墙"><a href="#centos关闭防火墙" class="headerlink" title="centos关闭防火墙"></a>centos关闭防火墙</h2><div class="code-wrapper"><pre><code class="hljs shell">1、查看防火墙状态firewall-cmd --state2、停止firewallsystemctl stop firewalld.service3、禁止firewall开机启动systemctl disable firewalld.service 4、新增开放端口firewall-cmd --zone=public --add-port=端口号/tcp --permanent5、移除开放端口firewall-cmd --zone=public --remove-port=端口号/tcp --permanent6、查看开放的端口firewall-cmd --zone=public --list-ports7、刷新防火墙firewall-cmd --reload</code></pre></div><h1 id="Github-page部署方式"><a href="#Github-page部署方式" class="headerlink" title="Github page部署方式"></a>Github page部署方式</h1><h2 id="ssh公钥生成"><a href="#ssh公钥生成" class="headerlink" title="ssh公钥生成"></a>ssh公钥生成</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh-keygen -o</span></code></pre></div><p>生成路径  C:\Users\用户名\.ssh</p><h2 id="hexo-准备工作"><a href="#hexo-准备工作" class="headerlink" title="hexo 准备工作"></a>hexo 准备工作</h2><p>编辑<code>_config.yml</code>文件 配置repo地址</p><a class="btn" href="https://hexo.io/docs/one-command-deployment"  title="One-Command Deployment" target="_blank">hexo</a><h2 id="安装-hexo-github-page-部署插件"><a href="#安装-hexo-github-page-部署插件" class="headerlink" title="安装 hexo github page 部署插件"></a>安装 hexo github page 部署插件</h2><div class="code-wrapper"><pre><code class="hljs shell">npm install hexo-deployer-git --save</code></pre></div><h2 id="进行部署上传"><a href="#进行部署上传" class="headerlink" title="进行部署上传"></a>进行部署上传</h2><div class="code-wrapper"><pre><code class="hljs shell">hexo cleanhexo g -d</code></pre></div><h2 id="搞定Github-Pages自定义域名"><a href="#搞定Github-Pages自定义域名" class="headerlink" title="搞定Github Pages自定义域名"></a>搞定Github Pages自定义域名</h2><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>ping xxx.github.io  记下ip</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>在购买域名的提供商为域名添加解析。</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>在Github中，找到托管博客的xxx.github.io项目，进入到设置页面<br><img src="https://img.hugqq.com/img/202204021435674.png">第四步</p><p>创建CNAME文件</p><p><img src="https://img.hugqq.com/img/202204021115250.png"></p><h1 id="hexo显示效果"><a href="#hexo显示效果" class="headerlink" title="hexo显示效果"></a>hexo显示效果</h1><p><strong>该博客用的是fluid主题</strong>  </p><p><a class="btn" href="https://hexo.fluid-dev.com/posts/hello-fluid/" title="title">显示效果</a><br><a class="btn" href="https://hexo.fluid-dev.com/docs/" title="title">用户手册</a></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport"          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <script src="https://cdn.bootcss.com/vue/2.5.17/vue.min.js"></script>    <script language="javascript" type="text/javascript" src="https://api.e-iceblue.cn/web/editors/api/documenteditor.js"></script>    <title>预览文档</title></head><body><div id="app"></div></body><script>    new Vue({        el: '#app',        data: {            url: ''        },        created() {            this.adjustIframe();            this.getQueryString();            this.url = 'https://view.officeapps.live.com/op/view.aspx?src=' + this.url            window.location.replace(this.url);        },        methods: {            getQueryString(name) {                let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");                let r = window.location.search.substr(1).match(reg);                if (r != null) {                    return decodeURIComponent(r[2]);                }                return null;            },            adjustIframe() {                let embed = document.getElementById("doc");                embed.height = document.documentElement.clientHeight;                embed.width = document.documentElement.clientWidth;            },        }    })</script><style>    * {        margin: 0;        padding: 0    }    #doc{        width: 100%;        height: 100vh;    }</style></html>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link href="https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet"><link href="https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet"><div class="entry-content">  <div id="kelecnbot" class="popcontainer" style="min-height: 0px; padding: 2px 6px 4px; background-color: rgba(255, 255, 255, 0.5); border-radius: 10px;"> <div style="text-align: center;">您正在与&nbsp;ocrud&nbsp;对话中...</div>     <bot-ui></botui>  </div></div><script src="/js/botui.js"></script><script></script>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>我的书单</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div class="douban-card-block">    <a class="douban-card" href="https://book.douban.com/subject/2035179">        <div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img3.doubanio.com/view/subject/s/public/s2347590.jpg');">        </div>        <div class="douban-card-left">            <div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img3.doubanio.com/view/subject/s/public/s2347590.jpg');">            </div>            <div class="douban-card-status">见字如晤</div>        </div>        <div class="douban-card-right" style="line-height: 1.7;">            <div class="douban-card-item"><span>书名: </span><strong>动物农场</strong></div>            <div class="douban-card-item"><span>作者: </span><span>[英国]乔治·奥威尔</span></div>            <div class="douban-card-item"><span>出版年份: </span><span>2007-3</span></div>            <div class="douban-card-item"><span>评分: </span><span>9.3</span></div>        </div>    </a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style>   ]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>我的影单</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
